// Code generated by protoc-gen-go.
// source: helloworld.proto
// DO NOT EDIT!

/*
Package helloworld is a generated protocol buffer package.

It is generated from these files:
	helloworld.proto

It has these top-level messages:
	HelloRequest
	HelloReply
	StreamingHelloRequest
	StreamingHelloReply
*/
package helloworld

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type HelloRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the greetings
type HelloReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HelloReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// The request message containing a list of names
type StreamingHelloRequest struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *StreamingHelloRequest) Reset()                    { *m = StreamingHelloRequest{} }
func (m *StreamingHelloRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamingHelloRequest) ProtoMessage()               {}
func (*StreamingHelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StreamingHelloRequest) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// The response message containing a list of greetings
type StreamingHelloReply struct {
	Messages []string `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *StreamingHelloReply) Reset()                    { *m = StreamingHelloReply{} }
func (m *StreamingHelloReply) String() string            { return proto.CompactTextString(m) }
func (*StreamingHelloReply) ProtoMessage()               {}
func (*StreamingHelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StreamingHelloReply) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "helloworld.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "helloworld.HelloReply")
	proto.RegisterType((*StreamingHelloRequest)(nil), "helloworld.StreamingHelloRequest")
	proto.RegisterType((*StreamingHelloReply)(nil), "helloworld.StreamingHelloReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Greeter service

type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	// Sends a list of names, receives a list of replies
	ServerStreamingSayHello(ctx context.Context, in *StreamingHelloRequest, opts ...grpc.CallOption) (Greeter_ServerStreamingSayHelloClient, error)
	// Sends a list of requests, receives a reply with list of greetings
	ClientStreamingSayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientStreamingSayHelloClient, error)
	// Keep sending and receiving request and reply
	BidirectionalStreamingSayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_BidirectionalStreamingSayHelloClient, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/helloworld.Greeter/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ServerStreamingSayHello(ctx context.Context, in *StreamingHelloRequest, opts ...grpc.CallOption) (Greeter_ServerStreamingSayHelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[0], c.cc, "/helloworld.Greeter/ServerStreamingSayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServerStreamingSayHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_ServerStreamingSayHelloClient interface {
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterServerStreamingSayHelloClient struct {
	grpc.ClientStream
}

func (x *greeterServerStreamingSayHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) ClientStreamingSayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientStreamingSayHelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[1], c.cc, "/helloworld.Greeter/ClientStreamingSayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterClientStreamingSayHelloClient{stream}
	return x, nil
}

type Greeter_ClientStreamingSayHelloClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*StreamingHelloReply, error)
	grpc.ClientStream
}

type greeterClientStreamingSayHelloClient struct {
	grpc.ClientStream
}

func (x *greeterClientStreamingSayHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterClientStreamingSayHelloClient) CloseAndRecv() (*StreamingHelloReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamingHelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) BidirectionalStreamingSayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_BidirectionalStreamingSayHelloClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Greeter_serviceDesc.Streams[2], c.cc, "/helloworld.Greeter/BidirectionalStreamingSayHello", opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterBidirectionalStreamingSayHelloClient{stream}
	return x, nil
}

type Greeter_BidirectionalStreamingSayHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloReply, error)
	grpc.ClientStream
}

type greeterBidirectionalStreamingSayHelloClient struct {
	grpc.ClientStream
}

func (x *greeterBidirectionalStreamingSayHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterBidirectionalStreamingSayHelloClient) Recv() (*HelloReply, error) {
	m := new(HelloReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Greeter service

type GreeterServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	// Sends a list of names, receives a list of replies
	ServerStreamingSayHello(*StreamingHelloRequest, Greeter_ServerStreamingSayHelloServer) error
	// Sends a list of requests, receives a reply with list of greetings
	ClientStreamingSayHello(Greeter_ClientStreamingSayHelloServer) error
	// Keep sending and receiving request and reply
	BidirectionalStreamingSayHello(Greeter_BidirectionalStreamingSayHelloServer) error
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ServerStreamingSayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamingHelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).ServerStreamingSayHello(m, &greeterServerStreamingSayHelloServer{stream})
}

type Greeter_ServerStreamingSayHelloServer interface {
	Send(*HelloReply) error
	grpc.ServerStream
}

type greeterServerStreamingSayHelloServer struct {
	grpc.ServerStream
}

func (x *greeterServerStreamingSayHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_ClientStreamingSayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).ClientStreamingSayHello(&greeterClientStreamingSayHelloServer{stream})
}

type Greeter_ClientStreamingSayHelloServer interface {
	SendAndClose(*StreamingHelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterClientStreamingSayHelloServer struct {
	grpc.ServerStream
}

func (x *greeterClientStreamingSayHelloServer) SendAndClose(m *StreamingHelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterClientStreamingSayHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_BidirectionalStreamingSayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).BidirectionalStreamingSayHello(&greeterBidirectionalStreamingSayHelloServer{stream})
}

type Greeter_BidirectionalStreamingSayHelloServer interface {
	Send(*HelloReply) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterBidirectionalStreamingSayHelloServer struct {
	grpc.ServerStream
}

func (x *greeterBidirectionalStreamingSayHelloServer) Send(m *HelloReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterBidirectionalStreamingSayHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingSayHello",
			Handler:       _Greeter_ServerStreamingSayHello_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingSayHello",
			Handler:       _Greeter_ClientStreamingSayHello_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingSayHello",
			Handler:       _Greeter_BidirectionalStreamingSayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld.proto",
}

func init() { proto.RegisterFile("helloworld.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x31, 0xff, 0xda, 0x9e, 0x18, 0x90, 0xf9, 0x17, 0x75, 0x80, 0xe2, 0x01, 0x65, 0xa1,
	0x2a, 0xb0, 0x33, 0xc0, 0x00, 0x73, 0xb2, 0xb0, 0x1a, 0x7a, 0x2a, 0x96, 0x1c, 0x3b, 0x9c, 0x0d,
	0x28, 0x9f, 0x94, 0xaf, 0x83, 0x6c, 0x9a, 0x10, 0x20, 0x41, 0xea, 0xe6, 0x67, 0xbf, 0xfb, 0xbd,
	0x77, 0x92, 0x61, 0xf7, 0x19, 0xb5, 0xb6, 0xef, 0x96, 0xf4, 0x7c, 0x5a, 0x92, 0xf5, 0x96, 0xc3,
	0xf7, 0x8d, 0x10, 0xb0, 0x73, 0x1f, 0x54, 0x86, 0x2f, 0xaf, 0xe8, 0x3c, 0xe7, 0xb0, 0x69, 0x64,
	0x81, 0x09, 0x9b, 0xb0, 0x74, 0x94, 0xc5, 0xb3, 0x38, 0x03, 0x58, 0x7a, 0x4a, 0x5d, 0xf1, 0x04,
	0x06, 0x05, 0x3a, 0x27, 0x17, 0xb5, 0xa9, 0x96, 0xe2, 0x1c, 0x0e, 0x72, 0x4f, 0x28, 0x0b, 0x65,
	0x16, 0x3f, 0xa0, 0xfb, 0xb0, 0x15, 0x40, 0x2e, 0x61, 0x93, 0x8d, 0x74, 0x94, 0x7d, 0x09, 0x71,
	0x01, 0x7b, 0xbf, 0xed, 0x81, 0x3f, 0x86, 0xe1, 0x12, 0x58, 0xfb, 0x1b, 0x7d, 0xf9, 0xb1, 0x0e,
	0x83, 0x3b, 0x42, 0xf4, 0x48, 0xfc, 0x1a, 0x86, 0xb9, 0xac, 0xe2, 0x20, 0x4f, 0xa6, 0xad, 0x25,
	0xdb, 0xd1, 0xe3, 0xc3, 0x8e, 0x97, 0x52, 0x57, 0x62, 0x8d, 0x3f, 0xc0, 0x51, 0x8e, 0xf4, 0x86,
	0xd4, 0x94, 0x68, 0x70, 0xa7, 0xed, 0xa1, 0xce, 0x95, 0xfa, 0xb9, 0x33, 0x16, 0xc8, 0xb7, 0x5a,
	0xa1, 0xf1, 0x7f, 0xc9, 0xfd, 0x45, 0x4f, 0xfe, 0xcb, 0x8c, 0xe4, 0x34, 0x90, 0x8f, 0x6f, 0xd4,
	0x5c, 0x11, 0x3e, 0x79, 0x65, 0x8d, 0xd4, 0xab, 0x04, 0xf4, 0x36, 0x4e, 0xd9, 0x8c, 0x3d, 0x6e,
	0xc7, 0xaf, 0x71, 0xf5, 0x19, 0x00, 0x00, 0xff, 0xff, 0xa1, 0xde, 0x85, 0xa2, 0x2e, 0x02, 0x00,
	0x00,
}
