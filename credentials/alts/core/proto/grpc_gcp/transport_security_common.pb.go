// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transport_security_common.proto

package grpc_gcp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The security level of the created channel. The list is sorted in increasing
// level of security. This order must always be maintained.
type SecurityLevel int32

const (
	SecurityLevel_SECURITY_NONE         SecurityLevel = 0
	SecurityLevel_INTEGRITY_ONLY        SecurityLevel = 1
	SecurityLevel_INTEGRITY_AND_PRIVACY SecurityLevel = 2
)

var SecurityLevel_name = map[int32]string{
	0: "SECURITY_NONE",
	1: "INTEGRITY_ONLY",
	2: "INTEGRITY_AND_PRIVACY",
}
var SecurityLevel_value = map[string]int32{
	"SECURITY_NONE":         0,
	"INTEGRITY_ONLY":        1,
	"INTEGRITY_AND_PRIVACY": 2,
}

func (x SecurityLevel) String() string {
	return proto.EnumName(SecurityLevel_name, int32(x))
}
func (SecurityLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// Max and min supported RPC protocol versions.
type RpcProtocolVersions struct {
	// Maximum supported RPC version.
	MaxRpcVersion *RpcProtocolVersions_Version `protobuf:"bytes,1,opt,name=max_rpc_version,json=maxRpcVersion" json:"max_rpc_version,omitempty"`
	// Minimum supported RPC version.
	MinRpcVersion *RpcProtocolVersions_Version `protobuf:"bytes,2,opt,name=min_rpc_version,json=minRpcVersion" json:"min_rpc_version,omitempty"`
}

func (m *RpcProtocolVersions) Reset()                    { *m = RpcProtocolVersions{} }
func (m *RpcProtocolVersions) String() string            { return proto.CompactTextString(m) }
func (*RpcProtocolVersions) ProtoMessage()               {}
func (*RpcProtocolVersions) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *RpcProtocolVersions) GetMaxRpcVersion() *RpcProtocolVersions_Version {
	if m != nil {
		return m.MaxRpcVersion
	}
	return nil
}

func (m *RpcProtocolVersions) GetMinRpcVersion() *RpcProtocolVersions_Version {
	if m != nil {
		return m.MinRpcVersion
	}
	return nil
}

// RPC version contains a major version and a minor version.
type RpcProtocolVersions_Version struct {
	Major uint32 `protobuf:"varint,1,opt,name=major" json:"major,omitempty"`
	Minor uint32 `protobuf:"varint,2,opt,name=minor" json:"minor,omitempty"`
}

func (m *RpcProtocolVersions_Version) Reset()                    { *m = RpcProtocolVersions_Version{} }
func (m *RpcProtocolVersions_Version) String() string            { return proto.CompactTextString(m) }
func (*RpcProtocolVersions_Version) ProtoMessage()               {}
func (*RpcProtocolVersions_Version) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0, 0} }

func (m *RpcProtocolVersions_Version) GetMajor() uint32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *RpcProtocolVersions_Version) GetMinor() uint32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func init() {
	proto.RegisterType((*RpcProtocolVersions)(nil), "grpc.gcp.RpcProtocolVersions")
	proto.RegisterType((*RpcProtocolVersions_Version)(nil), "grpc.gcp.RpcProtocolVersions.Version")
	proto.RegisterEnum("grpc.gcp.SecurityLevel", SecurityLevel_name, SecurityLevel_value)
}

func init() { proto.RegisterFile("transport_security_common.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xdf, 0x4a, 0xf3, 0x30,
	0x18, 0xc6, 0xbf, 0x0e, 0x3e, 0x95, 0x48, 0xb5, 0x46, 0x87, 0x7f, 0x4e, 0x14, 0x41, 0x10, 0x0f,
	0x72, 0xa0, 0x78, 0x01, 0x73, 0x16, 0x29, 0xcc, 0x6e, 0x66, 0x73, 0xd0, 0xa3, 0x10, 0x43, 0x19,
	0x91, 0x36, 0x6f, 0x78, 0x13, 0xc7, 0xbc, 0x65, 0xaf, 0x42, 0x9a, 0x76, 0x0c, 0xc1, 0x13, 0xcf,
	0xf2, 0xfc, 0xe0, 0xf9, 0x25, 0x79, 0xc8, 0xb9, 0x47, 0x69, 0x9c, 0x05, 0xf4, 0xc2, 0x95, 0xea,
	0x03, 0xb5, 0xff, 0x14, 0x0a, 0xea, 0x1a, 0x0c, 0xb3, 0x08, 0x1e, 0xe8, 0xce, 0x02, 0xad, 0x62,
	0x0b, 0x65, 0x2f, 0xbf, 0x22, 0x72, 0xc8, 0xad, 0x9a, 0x34, 0x58, 0x41, 0x35, 0x2f, 0xd1, 0x69,
	0x30, 0x8e, 0x3e, 0x93, 0xfd, 0x5a, 0xae, 0x04, 0x5a, 0x25, 0x96, 0x2d, 0x3b, 0x89, 0x2e, 0xa2,
	0xeb, 0xdd, 0xdb, 0x2b, 0xb6, 0xee, 0xb2, 0x5f, 0x7a, 0xac, 0x3b, 0xf0, 0xb8, 0x96, 0x2b, 0x6e,
	0x55, 0x17, 0x83, 0x4e, 0x9b, 0x1f, 0xba, 0xde, 0xdf, 0x74, 0xda, 0x6c, 0x74, 0x67, 0xf7, 0x64,
	0x7b, 0x6d, 0x3e, 0x22, 0xff, 0x6b, 0xf9, 0x0e, 0x18, 0x9e, 0x17, 0xf3, 0x36, 0x04, 0xaa, 0x0d,
	0x60, 0xb8, 0xa5, 0xa1, 0x4d, 0xb8, 0x79, 0x21, 0xf1, 0xb4, 0xdb, 0x63, 0x54, 0x2e, 0xcb, 0x8a,
	0x1e, 0x90, 0x78, 0x9a, 0x0e, 0x5f, 0x79, 0x36, 0x2b, 0x44, 0x3e, 0xce, 0xd3, 0xe4, 0x1f, 0xa5,
	0x64, 0x2f, 0xcb, 0x67, 0xe9, 0x53, 0x60, 0xe3, 0x7c, 0x54, 0x24, 0x11, 0x3d, 0x25, 0xfd, 0x0d,
	0x1b, 0xe4, 0x8f, 0x62, 0xc2, 0xb3, 0xf9, 0x60, 0x58, 0x24, 0xbd, 0x87, 0x63, 0xd2, 0xd7, 0xd0,
	0xfe, 0x41, 0x56, 0xde, 0x31, 0x6d, 0x7c, 0x89, 0x46, 0x56, 0x6f, 0x5b, 0x61, 0xe9, 0xbb, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x4d, 0xc2, 0xf0, 0x8c, 0x01, 0x00, 0x00,
}
