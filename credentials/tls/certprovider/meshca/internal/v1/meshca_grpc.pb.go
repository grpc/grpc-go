// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package google_security_meshca_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MeshCertificateServiceClient is the client API for MeshCertificateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeshCertificateServiceClient interface {
	// Using provided CSR, returns a signed certificate that represents a GCP
	// service account identity.
	CreateCertificate(ctx context.Context, in *MeshCertificateRequest, opts ...grpc.CallOption) (*MeshCertificateResponse, error)
}

type meshCertificateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshCertificateServiceClient(cc grpc.ClientConnInterface) MeshCertificateServiceClient {
	return &meshCertificateServiceClient{cc}
}

var meshCertificateServiceCreateCertificateStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateCertificate",
}

func (c *meshCertificateServiceClient) CreateCertificate(ctx context.Context, in *MeshCertificateRequest, opts ...grpc.CallOption) (*MeshCertificateResponse, error) {
	out := new(MeshCertificateResponse)
	err := c.cc.Invoke(ctx, "/google.security.meshca.v1.MeshCertificateService/CreateCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshCertificateServiceService is the service API for MeshCertificateService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterMeshCertificateServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type MeshCertificateServiceService struct {
	// Using provided CSR, returns a signed certificate that represents a GCP
	// service account identity.
	CreateCertificate func(context.Context, *MeshCertificateRequest) (*MeshCertificateResponse, error)
}

func (s *MeshCertificateServiceService) createCertificate(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeshCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/google.security.meshca.v1.MeshCertificateService/CreateCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateCertificate(ctx, req.(*MeshCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterMeshCertificateServiceService registers a service implementation with a gRPC server.
func RegisterMeshCertificateServiceService(s grpc.ServiceRegistrar, srv *MeshCertificateServiceService) {
	srvCopy := *srv
	if srvCopy.CreateCertificate == nil {
		srvCopy.CreateCertificate = func(context.Context, *MeshCertificateRequest) (*MeshCertificateResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateCertificate not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "google.security.meshca.v1.MeshCertificateService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreateCertificate",
				Handler:    srvCopy.createCertificate,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "istio/google/security/meshca/v1/meshca.proto",
	}

	s.RegisterService(&sd, nil)
}

// MeshCertificateServiceServer is the service API for MeshCertificateService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended unless you own the service definition.
type MeshCertificateServiceServer interface {
	// Using provided CSR, returns a signed certificate that represents a GCP
	// service account identity.
	CreateCertificate(context.Context, *MeshCertificateRequest) (*MeshCertificateResponse, error)
}

// UnimplementedMeshCertificateServiceServer can be embedded to have forward compatible implementations of
// MeshCertificateServiceServer
type UnimplementedMeshCertificateServiceServer struct {
}

func (*UnimplementedMeshCertificateServiceServer) CreateCertificate(context.Context, *MeshCertificateRequest) (*MeshCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificate not implemented")
}

// RegisterMeshCertificateServiceServer registers a service implementation with a gRPC server.
func RegisterMeshCertificateServiceServer(s grpc.ServiceRegistrar, srv MeshCertificateServiceServer) {
	str := &MeshCertificateServiceService{
		CreateCertificate: srv.CreateCertificate,
	}
	RegisterMeshCertificateServiceService(s, str)
}
