// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_testingv3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SearchServiceV3Client is the client API for SearchServiceV3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchServiceV3Client interface {
	Search(ctx context.Context, in *SearchRequestV3, opts ...grpc.CallOption) (*SearchResponseV3, error)
	StreamingSearch(ctx context.Context, opts ...grpc.CallOption) (SearchServiceV3_StreamingSearchClient, error)
}

type searchServiceV3Client struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceV3Client(cc grpc.ClientConnInterface) SearchServiceV3Client {
	return &searchServiceV3Client{cc}
}

func (c *searchServiceV3Client) Search(ctx context.Context, in *SearchRequestV3, opts ...grpc.CallOption) (*SearchResponseV3, error) {
	out := new(SearchResponseV3)
	err := c.cc.Invoke(ctx, "/grpc.testingv3.SearchServiceV3/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceV3Client) StreamingSearch(ctx context.Context, opts ...grpc.CallOption) (SearchServiceV3_StreamingSearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SearchServiceV3_serviceDesc.Streams[0], "/grpc.testingv3.SearchServiceV3/StreamingSearch", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchServiceV3StreamingSearchClient{stream}
	return x, nil
}

type SearchServiceV3_StreamingSearchClient interface {
	Send(*SearchRequestV3) error
	Recv() (*SearchResponseV3, error)
	grpc.ClientStream
}

type searchServiceV3StreamingSearchClient struct {
	grpc.ClientStream
}

func (x *searchServiceV3StreamingSearchClient) Send(m *SearchRequestV3) error {
	return x.ClientStream.SendMsg(m)
}

func (x *searchServiceV3StreamingSearchClient) Recv() (*SearchResponseV3, error) {
	m := new(SearchResponseV3)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchServiceV3Server is the server API for SearchServiceV3 service.
type SearchServiceV3Server interface {
	Search(context.Context, *SearchRequestV3) (*SearchResponseV3, error)
	StreamingSearch(SearchServiceV3_StreamingSearchServer) error
}

// UnimplementedSearchServiceV3Server can be embedded to have forward compatible implementations.
type UnimplementedSearchServiceV3Server struct {
}

func (*UnimplementedSearchServiceV3Server) Search(context.Context, *SearchRequestV3) (*SearchResponseV3, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedSearchServiceV3Server) StreamingSearch(SearchServiceV3_StreamingSearchServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSearch not implemented")
}

func RegisterSearchServiceV3Server(s *grpc.Server, srv SearchServiceV3Server) {
	s.RegisterService(&_SearchServiceV3_serviceDesc, srv)
}

func _SearchServiceV3_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceV3Server).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.testingv3.SearchServiceV3/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceV3Server).Search(ctx, req.(*SearchRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchServiceV3_StreamingSearch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearchServiceV3Server).StreamingSearch(&searchServiceV3StreamingSearchServer{stream})
}

type SearchServiceV3_StreamingSearchServer interface {
	Send(*SearchResponseV3) error
	Recv() (*SearchRequestV3, error)
	grpc.ServerStream
}

type searchServiceV3StreamingSearchServer struct {
	grpc.ServerStream
}

func (x *searchServiceV3StreamingSearchServer) Send(m *SearchResponseV3) error {
	return x.ServerStream.SendMsg(m)
}

func (x *searchServiceV3StreamingSearchServer) Recv() (*SearchRequestV3, error) {
	m := new(SearchRequestV3)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SearchServiceV3_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.testingv3.SearchServiceV3",
	HandlerType: (*SearchServiceV3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchServiceV3_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSearch",
			Handler:       _SearchServiceV3_StreamingSearch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "reflection/grpc_testingv3/testv3.proto",
}
