// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_testing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SearchServiceService is the service API for SearchService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterSearchServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type SearchServiceService struct {
	Search          func(context.Context, *SearchRequest) (*SearchResponse, error)
	StreamingSearch func(SearchService_StreamingSearchServer) error
}

func (s *SearchServiceService) search(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	if s.Search == nil {
		return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
	}
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/grpc.testing.SearchService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *SearchServiceService) streamingSearch(_ interface{}, stream grpc.ServerStream) error {
	if s.StreamingSearch == nil {
		return status.Errorf(codes.Unimplemented, "method StreamingSearch not implemented")
	}
	return s.StreamingSearch(&searchServiceStreamingSearchServer{stream})
}

// RegisterSearchServiceService registers a service implementation with a gRPC server.
func RegisterSearchServiceService(s grpc.ServiceRegistrar, srv *SearchServiceService) {
	sd := grpc.ServiceDesc{
		ServiceName: "grpc.testing.SearchService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Search",
				Handler:    srv.search,
			},
		},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "StreamingSearch",
				Handler:       srv.streamingSearch,
				ServerStreams: true,
				ClientStreams: true,
			},
		},
		Metadata: "reflection/grpc_testing/test.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewSearchServiceService creates a new SearchServiceService containing the
// implemented methods of the SearchService service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewSearchServiceService(s interface{}) *SearchServiceService {
	ns := &SearchServiceService{}
	if h, ok := s.(interface {
		Search(context.Context, *SearchRequest) (*SearchResponse, error)
	}); ok {
		ns.Search = h.Search
	}
	if h, ok := s.(interface {
		StreamingSearch(SearchService_StreamingSearchServer) error
	}); ok {
		ns.StreamingSearch = h.StreamingSearch
	}
	return ns
}

// UnstableSearchServiceService is the service API for SearchService service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableSearchServiceService interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	StreamingSearch(SearchService_StreamingSearchServer) error
}
