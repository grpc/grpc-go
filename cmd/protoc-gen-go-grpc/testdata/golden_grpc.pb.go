// Copyright 2024 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: cmd/protoc-gen-go-grpc/testdata/golden.proto

package testdata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BidirectionalStreamingService_UnaryMethod_FullMethodName         = "/main.BidirectionalStreamingService/unaryMethod"
	BidirectionalStreamingService_ClientMethod_FullMethodName        = "/main.BidirectionalStreamingService/clientMethod"
	BidirectionalStreamingService_ServerMethod_FullMethodName        = "/main.BidirectionalStreamingService/serverMethod"
	BidirectionalStreamingService_BidirectionalMethod_FullMethodName = "/main.BidirectionalStreamingService/bidirectionalMethod"
)

// BidirectionalStreamingServiceClient is the client API for BidirectionalStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidirectionalStreamingServiceClient interface {
	UnaryMethod(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	ClientMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamClient[EventRequest, EventResponse], error)
	ServerMethod(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (grpc.ServerStreamClient[EventResponse], error)
	BidirectionalMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamClient[EventRequest, EventResponse], error)
}

type bidirectionalStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBidirectionalStreamingServiceClient(cc grpc.ClientConnInterface) BidirectionalStreamingServiceClient {
	return &bidirectionalStreamingServiceClient{cc}
}

func (c *bidirectionalStreamingServiceClient) UnaryMethod(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, BidirectionalStreamingService_UnaryMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidirectionalStreamingServiceClient) ClientMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamClient[EventRequest, EventResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BidirectionalStreamingService_ServiceDesc.Streams[0], BidirectionalStreamingService_ClientMethod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.StreamClientImpl[EventRequest, EventResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidirectionalStreamingService_ClientMethodClient = grpc.ClientStreamClient[EventRequest, EventResponse]

func (c *bidirectionalStreamingServiceClient) ServerMethod(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (grpc.ServerStreamClient[EventResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BidirectionalStreamingService_ServiceDesc.Streams[1], BidirectionalStreamingService_ServerMethod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.StreamClientImpl[EventRequest, EventResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidirectionalStreamingService_ServerMethodClient = grpc.ServerStreamClient[EventResponse]

func (c *bidirectionalStreamingServiceClient) BidirectionalMethod(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamClient[EventRequest, EventResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BidirectionalStreamingService_ServiceDesc.Streams[2], BidirectionalStreamingService_BidirectionalMethod_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.StreamClientImpl[EventRequest, EventResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidirectionalStreamingService_BidirectionalMethodClient = grpc.BidiStreamClient[EventRequest, EventResponse]

// BidirectionalStreamingServiceServer is the server API for BidirectionalStreamingService service.
// All implementations must embed UnimplementedBidirectionalStreamingServiceServer
// for forward compatibility
type BidirectionalStreamingServiceServer interface {
	UnaryMethod(context.Context, *EventRequest) (*EventResponse, error)
	ClientMethod(grpc.ClientStreamServer[EventRequest, EventResponse]) error
	ServerMethod(*EventRequest, grpc.ServerStreamServer[EventResponse]) error
	BidirectionalMethod(grpc.BidiStreamServer[EventRequest, EventResponse]) error
	mustEmbedUnimplementedBidirectionalStreamingServiceServer()
}

// UnimplementedBidirectionalStreamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBidirectionalStreamingServiceServer struct {
}

func (UnimplementedBidirectionalStreamingServiceServer) UnaryMethod(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryMethod not implemented")
}
func (UnimplementedBidirectionalStreamingServiceServer) ClientMethod(grpc.ClientStreamServer[EventRequest, EventResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ClientMethod not implemented")
}
func (UnimplementedBidirectionalStreamingServiceServer) ServerMethod(*EventRequest, grpc.ServerStreamServer[EventResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ServerMethod not implemented")
}
func (UnimplementedBidirectionalStreamingServiceServer) BidirectionalMethod(grpc.BidiStreamServer[EventRequest, EventResponse]) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalMethod not implemented")
}
func (UnimplementedBidirectionalStreamingServiceServer) mustEmbedUnimplementedBidirectionalStreamingServiceServer() {
}

// UnsafeBidirectionalStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidirectionalStreamingServiceServer will
// result in compilation errors.
type UnsafeBidirectionalStreamingServiceServer interface {
	mustEmbedUnimplementedBidirectionalStreamingServiceServer()
}

func RegisterBidirectionalStreamingServiceServer(s grpc.ServiceRegistrar, srv BidirectionalStreamingServiceServer) {
	s.RegisterService(&BidirectionalStreamingService_ServiceDesc, srv)
}

func _BidirectionalStreamingService_UnaryMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidirectionalStreamingServiceServer).UnaryMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BidirectionalStreamingService_UnaryMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidirectionalStreamingServiceServer).UnaryMethod(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidirectionalStreamingService_ClientMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionalStreamingServiceServer).ClientMethod(&grpc.StreamServerImpl[EventRequest, EventResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidirectionalStreamingService_ClientMethodServer = grpc.ClientStreamServer[EventRequest, EventResponse]

func _BidirectionalStreamingService_ServerMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BidirectionalStreamingServiceServer).ServerMethod(m, &grpc.StreamServerImpl[EventRequest, EventResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidirectionalStreamingService_ServerMethodServer = grpc.ServerStreamServer[EventResponse]

func _BidirectionalStreamingService_BidirectionalMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionalStreamingServiceServer).BidirectionalMethod(&grpc.StreamServerImpl[EventRequest, EventResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BidirectionalStreamingService_BidirectionalMethodServer = grpc.BidiStreamServer[EventRequest, EventResponse]

// BidirectionalStreamingService_ServiceDesc is the grpc.ServiceDesc for BidirectionalStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidirectionalStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.BidirectionalStreamingService",
	HandlerType: (*BidirectionalStreamingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "unaryMethod",
			Handler:    _BidirectionalStreamingService_UnaryMethod_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "clientMethod",
			Handler:       _BidirectionalStreamingService_ClientMethod_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "serverMethod",
			Handler:       _BidirectionalStreamingService_ServerMethod_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "bidirectionalMethod",
			Handler:       _BidirectionalStreamingService_BidirectionalMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/protoc-gen-go-grpc/testdata/golden.proto",
}
