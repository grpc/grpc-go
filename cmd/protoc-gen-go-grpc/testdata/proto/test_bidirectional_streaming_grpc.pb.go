// Copyright 2024 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: proto/test_bidirectional_streaming.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BidirectionalStreamingService_BidirectionalMethod_FullMethodName = "/main.BidirectionalStreamingService/bidirectionalMethod"
)

// BidirectionalStreamingServiceClient is the client API for BidirectionalStreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidirectionalStreamingServiceClient interface {
	BidirectionalMethod(ctx context.Context, opts ...grpc.CallOption) (BidirectionalStreamingService_BidirectionalMethodClient, error)
}

type bidirectionalStreamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBidirectionalStreamingServiceClient(cc grpc.ClientConnInterface) BidirectionalStreamingServiceClient {
	return &bidirectionalStreamingServiceClient{cc}
}

func (c *bidirectionalStreamingServiceClient) BidirectionalMethod(ctx context.Context, opts ...grpc.CallOption) (BidirectionalStreamingService_BidirectionalMethodClient, error) {
	stream, err := c.cc.NewStream(ctx, &BidirectionalStreamingService_ServiceDesc.Streams[0], BidirectionalStreamingService_BidirectionalMethod_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bidirectionalStreamingServiceBidirectionalMethodClient{stream}
	return x, nil
}

type BidirectionalStreamingService_BidirectionalMethodClient interface {
	Send(*EventRequest) error
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type bidirectionalStreamingServiceBidirectionalMethodClient struct {
	grpc.ClientStream
}

func (x *bidirectionalStreamingServiceBidirectionalMethodClient) Send(m *EventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidirectionalStreamingServiceBidirectionalMethodClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectionalStreamingServiceServer is the server API for BidirectionalStreamingService service.
// All implementations must embed UnimplementedBidirectionalStreamingServiceServer
// for forward compatibility
type BidirectionalStreamingServiceServer interface {
	BidirectionalMethod(BidirectionalStreamingService_BidirectionalMethodServer) error
	mustEmbedUnimplementedBidirectionalStreamingServiceServer()
}

// UnimplementedBidirectionalStreamingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBidirectionalStreamingServiceServer struct {
}

func (UnimplementedBidirectionalStreamingServiceServer) BidirectionalMethod(BidirectionalStreamingService_BidirectionalMethodServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalMethod not implemented")
}
func (UnimplementedBidirectionalStreamingServiceServer) mustEmbedUnimplementedBidirectionalStreamingServiceServer() {
}

// UnsafeBidirectionalStreamingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidirectionalStreamingServiceServer will
// result in compilation errors.
type UnsafeBidirectionalStreamingServiceServer interface {
	mustEmbedUnimplementedBidirectionalStreamingServiceServer()
}

func RegisterBidirectionalStreamingServiceServer(s grpc.ServiceRegistrar, srv BidirectionalStreamingServiceServer) {
	s.RegisterService(&BidirectionalStreamingService_ServiceDesc, srv)
}

func _BidirectionalStreamingService_BidirectionalMethod_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidirectionalStreamingServiceServer).BidirectionalMethod(&bidirectionalStreamingServiceBidirectionalMethodServer{stream})
}

type BidirectionalStreamingService_BidirectionalMethodServer interface {
	Send(*EventResponse) error
	Recv() (*EventRequest, error)
	grpc.ServerStream
}

type bidirectionalStreamingServiceBidirectionalMethodServer struct {
	grpc.ServerStream
}

func (x *bidirectionalStreamingServiceBidirectionalMethodServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidirectionalStreamingServiceBidirectionalMethodServer) Recv() (*EventRequest, error) {
	m := new(EventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidirectionalStreamingService_ServiceDesc is the grpc.ServiceDesc for BidirectionalStreamingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidirectionalStreamingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.BidirectionalStreamingService",
	HandlerType: (*BidirectionalStreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "bidirectionalMethod",
			Handler:       _BidirectionalStreamingService_BidirectionalMethod_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/test_bidirectional_streaming.proto",
}
