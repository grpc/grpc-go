// Code generated by protoc-gen-go. DO NOT EDIT.
// source: http_over_grpc.proto

package grpc_http_over_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Represents HTTP 1.1 header.
type Header struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values               []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Header) Reset()         { *m = Header{} }
func (m *Header) String() string { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()    {}
func (*Header) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffc91a00d67a2c6f, []int{0}
}

func (m *Header) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Header.Unmarshal(m, b)
}
func (m *Header) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Header.Marshal(b, m, deterministic)
}
func (m *Header) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Header.Merge(m, src)
}
func (m *Header) XXX_Size() int {
	return xxx_messageInfo_Header.Size(m)
}
func (m *Header) XXX_DiscardUnknown() {
	xxx_messageInfo_Header.DiscardUnknown(m)
}

var xxx_messageInfo_Header proto.InternalMessageInfo

func (m *Header) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Header) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

// An HTTP 1.1 request encapsulated in a gRPC.
type HTTPOverGRPCRequest struct {
	// The HTTP request method.
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// The HTTP request URL.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// The HTTP request headers.
	Headers []*Header `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	// HTTP request body.
	Body                 []byte   `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPOverGRPCRequest) Reset()         { *m = HTTPOverGRPCRequest{} }
func (m *HTTPOverGRPCRequest) String() string { return proto.CompactTextString(m) }
func (*HTTPOverGRPCRequest) ProtoMessage()    {}
func (*HTTPOverGRPCRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffc91a00d67a2c6f, []int{1}
}

func (m *HTTPOverGRPCRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPOverGRPCRequest.Unmarshal(m, b)
}
func (m *HTTPOverGRPCRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPOverGRPCRequest.Marshal(b, m, deterministic)
}
func (m *HTTPOverGRPCRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPOverGRPCRequest.Merge(m, src)
}
func (m *HTTPOverGRPCRequest) XXX_Size() int {
	return xxx_messageInfo_HTTPOverGRPCRequest.Size(m)
}
func (m *HTTPOverGRPCRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPOverGRPCRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPOverGRPCRequest proto.InternalMessageInfo

func (m *HTTPOverGRPCRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HTTPOverGRPCRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HTTPOverGRPCRequest) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPOverGRPCRequest) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// An HTTP 1.1 reply encapsulated in an RPC.
type HTTPOverGRPCReply struct {
	// The HTTP status code (e.g. 200, 400, 404).
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// The HTTP response headers.
	Headers []*Header `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	// The HTTP response body.
	Body                 []byte   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HTTPOverGRPCReply) Reset()         { *m = HTTPOverGRPCReply{} }
func (m *HTTPOverGRPCReply) String() string { return proto.CompactTextString(m) }
func (*HTTPOverGRPCReply) ProtoMessage()    {}
func (*HTTPOverGRPCReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_ffc91a00d67a2c6f, []int{2}
}

func (m *HTTPOverGRPCReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HTTPOverGRPCReply.Unmarshal(m, b)
}
func (m *HTTPOverGRPCReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HTTPOverGRPCReply.Marshal(b, m, deterministic)
}
func (m *HTTPOverGRPCReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPOverGRPCReply.Merge(m, src)
}
func (m *HTTPOverGRPCReply) XXX_Size() int {
	return xxx_messageInfo_HTTPOverGRPCReply.Size(m)
}
func (m *HTTPOverGRPCReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPOverGRPCReply.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPOverGRPCReply proto.InternalMessageInfo

func (m *HTTPOverGRPCReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *HTTPOverGRPCReply) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HTTPOverGRPCReply) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "grpc.http_over_grpc.Header")
	proto.RegisterType((*HTTPOverGRPCRequest)(nil), "grpc.http_over_grpc.HTTPOverGRPCRequest")
	proto.RegisterType((*HTTPOverGRPCReply)(nil), "grpc.http_over_grpc.HTTPOverGRPCReply")
}

func init() { proto.RegisterFile("http_over_grpc.proto", fileDescriptor_ffc91a00d67a2c6f) }

var fileDescriptor_ffc91a00d67a2c6f = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x6d, 0x33, 0x2b, 0x7b, 0xb7, 0x83, 0x66, 0x22, 0x41, 0x2f, 0xa5, 0x07, 0xc9, 0xa9,
	0x87, 0x8a, 0x9f, 0xc0, 0x83, 0xbb, 0x39, 0xc2, 0xee, 0xa3, 0xb3, 0x2f, 0x16, 0x8c, 0x24, 0xcb,
	0x9f, 0x42, 0xbf, 0x82, 0x9f, 0x5a, 0x9a, 0x65, 0xb8, 0x61, 0x0f, 0xb2, 0xdb, 0xf3, 0x90, 0x87,
	0xe7, 0xf9, 0xf1, 0x06, 0x6e, 0x5b, 0xe7, 0xf4, 0x46, 0x75, 0x68, 0x36, 0x1f, 0x46, 0xbf, 0x97,
	0xda, 0x28, 0xa7, 0xe8, 0x22, 0xe8, 0xd3, 0xa7, 0xa2, 0x82, 0x6c, 0x89, 0x75, 0x83, 0x86, 0x5e,
	0x03, 0xf9, 0xc4, 0x9e, 0x25, 0x79, 0xc2, 0xa7, 0x62, 0x90, 0xf4, 0x0e, 0xb2, 0xae, 0x96, 0x1e,
	0x2d, 0x4b, 0x73, 0xc2, 0xa7, 0x22, 0xba, 0xe2, 0x3b, 0x81, 0xc5, 0x72, 0xbd, 0x5e, 0xbd, 0x75,
	0x68, 0x5e, 0xc5, 0xea, 0x45, 0xe0, 0xce, 0xa3, 0x75, 0x43, 0xfe, 0x0b, 0x5d, 0xab, 0x9a, 0x58,
	0x12, 0xdd, 0xd0, 0xec, 0x8d, 0x64, 0xe9, 0xbe, 0xd9, 0x1b, 0x49, 0x9f, 0xe1, 0xaa, 0x0d, 0xab,
	0x96, 0x91, 0x9c, 0xf0, 0x59, 0xf5, 0x50, 0x8e, 0xc0, 0x95, 0x7b, 0x32, 0x71, 0xc8, 0x52, 0x0a,
	0x93, 0xad, 0x6a, 0x7a, 0x36, 0xc9, 0x13, 0x3e, 0x17, 0x41, 0x17, 0x1d, 0xdc, 0x9c, 0xb2, 0x68,
	0x19, 0xc8, 0xad, 0xab, 0x9d, 0xb7, 0x81, 0xe4, 0x52, 0x44, 0x77, 0xbc, 0x9b, 0x9e, 0xb1, 0x4b,
	0x7e, 0x77, 0xab, 0x1d, 0xcc, 0x8f, 0x77, 0x69, 0x0d, 0xb3, 0xc1, 0x1f, 0x6e, 0xc1, 0xc7, 0x8b,
	0xff, 0x5e, 0xed, 0xfe, 0xf1, 0x1f, 0x49, 0x2d, 0xfb, 0xe2, 0x62, 0x9b, 0x85, 0x7f, 0x7c, 0xfa,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x20, 0x37, 0x55, 0x77, 0xdf, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HTTPOverGRPCClient is the client API for HTTPOverGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HTTPOverGRPCClient interface {
	// Perform the given HTTP request.
	HTTPRequest(ctx context.Context, in *HTTPOverGRPCRequest, opts ...grpc.CallOption) (*HTTPOverGRPCReply, error)
}

type hTTPOverGRPCClient struct {
	cc *grpc.ClientConn
}

func NewHTTPOverGRPCClient(cc *grpc.ClientConn) HTTPOverGRPCClient {
	return &hTTPOverGRPCClient{cc}
}

func (c *hTTPOverGRPCClient) HTTPRequest(ctx context.Context, in *HTTPOverGRPCRequest, opts ...grpc.CallOption) (*HTTPOverGRPCReply, error) {
	out := new(HTTPOverGRPCReply)
	err := c.cc.Invoke(ctx, "/grpc.http_over_grpc.HTTPOverGRPC/HTTPRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPOverGRPCServer is the server API for HTTPOverGRPC service.
type HTTPOverGRPCServer interface {
	// Perform the given HTTP request.
	HTTPRequest(context.Context, *HTTPOverGRPCRequest) (*HTTPOverGRPCReply, error)
}

// UnimplementedHTTPOverGRPCServer can be embedded to have forward compatible implementations.
type UnimplementedHTTPOverGRPCServer struct {
}

func (*UnimplementedHTTPOverGRPCServer) HTTPRequest(ctx context.Context, req *HTTPOverGRPCRequest) (*HTTPOverGRPCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTTPRequest not implemented")
}

func RegisterHTTPOverGRPCServer(s *grpc.Server, srv HTTPOverGRPCServer) {
	s.RegisterService(&_HTTPOverGRPC_serviceDesc, srv)
}

func _HTTPOverGRPC_HTTPRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HTTPOverGRPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPOverGRPCServer).HTTPRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.http_over_grpc.HTTPOverGRPC/HTTPRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPOverGRPCServer).HTTPRequest(ctx, req.(*HTTPOverGRPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTPOverGRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.http_over_grpc.HTTPOverGRPC",
	HandlerType: (*HTTPOverGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HTTPRequest",
			Handler:    _HTTPOverGRPC_HTTPRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http_over_grpc.proto",
}
