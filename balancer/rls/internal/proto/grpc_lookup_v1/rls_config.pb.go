// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc/lookup/v1/rls_config.proto

package grpc_lookup_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Extract a key based on a given name (e.g. header name or query parameter
// name).  The name must match one of the names listed in the "name" field.  If
// the "required_match" field is true, one of the specified names must be
// present for the keybuilder to match.
type NameMatcher struct {
	// The name that will be used in the RLS key_map to refer to this value.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Ordered list of names (headers or query parameter names) that can supply
	// this value; the first one with a non-empty value is used.
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	// If true, make this extraction required; the key builder will not match
	// if no value is found.
	RequiredMatch        bool     `protobuf:"varint,3,opt,name=required_match,json=requiredMatch,proto3" json:"required_match,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameMatcher) Reset()         { *m = NameMatcher{} }
func (m *NameMatcher) String() string { return proto.CompactTextString(m) }
func (*NameMatcher) ProtoMessage()    {}
func (*NameMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fe74d4f6e8f01c1, []int{0}
}

func (m *NameMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NameMatcher.Unmarshal(m, b)
}
func (m *NameMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NameMatcher.Marshal(b, m, deterministic)
}
func (m *NameMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameMatcher.Merge(m, src)
}
func (m *NameMatcher) XXX_Size() int {
	return xxx_messageInfo_NameMatcher.Size(m)
}
func (m *NameMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_NameMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_NameMatcher proto.InternalMessageInfo

func (m *NameMatcher) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *NameMatcher) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *NameMatcher) GetRequiredMatch() bool {
	if m != nil {
		return m.RequiredMatch
	}
	return false
}

// A GrpcKeyBuilder applies to a given gRPC service, name, and headers.
type GrpcKeyBuilder struct {
	Names []*GrpcKeyBuilder_Name `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	// Extract keys from all listed headers.
	// For gRPC, it is an error to specify "required_match" on the NameMatcher
	// protos.
	Headers              []*NameMatcher `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GrpcKeyBuilder) Reset()         { *m = GrpcKeyBuilder{} }
func (m *GrpcKeyBuilder) String() string { return proto.CompactTextString(m) }
func (*GrpcKeyBuilder) ProtoMessage()    {}
func (*GrpcKeyBuilder) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fe74d4f6e8f01c1, []int{1}
}

func (m *GrpcKeyBuilder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcKeyBuilder.Unmarshal(m, b)
}
func (m *GrpcKeyBuilder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcKeyBuilder.Marshal(b, m, deterministic)
}
func (m *GrpcKeyBuilder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcKeyBuilder.Merge(m, src)
}
func (m *GrpcKeyBuilder) XXX_Size() int {
	return xxx_messageInfo_GrpcKeyBuilder.Size(m)
}
func (m *GrpcKeyBuilder) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcKeyBuilder.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcKeyBuilder proto.InternalMessageInfo

func (m *GrpcKeyBuilder) GetNames() []*GrpcKeyBuilder_Name {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *GrpcKeyBuilder) GetHeaders() []*NameMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

// To match, one of the given Name fields must match; the service and method
// fields are specified as fixed strings.  The service name is required and
// includes the proto package name.  The method name may be omitted, in
// which case any method on the given service is matched.
type GrpcKeyBuilder_Name struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Method               string   `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GrpcKeyBuilder_Name) Reset()         { *m = GrpcKeyBuilder_Name{} }
func (m *GrpcKeyBuilder_Name) String() string { return proto.CompactTextString(m) }
func (*GrpcKeyBuilder_Name) ProtoMessage()    {}
func (*GrpcKeyBuilder_Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fe74d4f6e8f01c1, []int{1, 0}
}

func (m *GrpcKeyBuilder_Name) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GrpcKeyBuilder_Name.Unmarshal(m, b)
}
func (m *GrpcKeyBuilder_Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GrpcKeyBuilder_Name.Marshal(b, m, deterministic)
}
func (m *GrpcKeyBuilder_Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrpcKeyBuilder_Name.Merge(m, src)
}
func (m *GrpcKeyBuilder_Name) XXX_Size() int {
	return xxx_messageInfo_GrpcKeyBuilder_Name.Size(m)
}
func (m *GrpcKeyBuilder_Name) XXX_DiscardUnknown() {
	xxx_messageInfo_GrpcKeyBuilder_Name.DiscardUnknown(m)
}

var xxx_messageInfo_GrpcKeyBuilder_Name proto.InternalMessageInfo

func (m *GrpcKeyBuilder_Name) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *GrpcKeyBuilder_Name) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// An HttpKeyBuilder applies to a given HTTP URL and headers.
//
// Path and host patterns use the matching syntax from gRPC transcoding to
// extract named key/value pairs from the path and host components of the URL:
// https://github.com/googleapis/googleapis/blob/master/google/api/http.proto
//
// It is invalid to specify the same key name in multiple places in a pattern.
//
// For a service where the project id can be expressed either as a subdomain or
// in the path, separate HttpKeyBuilders must be used:
//     host_pattern: 'example.com' path_pattern: '/{id}/{object}/**'
//     host_pattern: '{id}.example.com' path_pattern: '/{object}/**'
// If the host is exactly 'example.com', the first path segment will be used as
// the id and the second segment as the object. If the host has a subdomain, the
// subdomain will be used as the id and the first segment as the object. If
// neither pattern matches, no keys will be extracted.
type HttpKeyBuilder struct {
	// host_pattern is an ordered list of host template patterns for the desired
	// value.  If any host_pattern values are specified, then at least one must
	// match, and the last one wins and sets any specified variables.  A host
	// consists of labels separated by dots. Each label is matched against the
	// label in the pattern as follows:
	//   - "*": Matches any single label.
	//   - "**": Matches zero or more labels (first or last part of host only).
	//   - "{<name>=...}": One or more label capture, where "..." can be any
	//      template that does not include a capture.
	//   - "{<name>}": A single label capture. Identical to {<name>=*}.
	//
	// Examples:
	//   - "example.com": Only applies to the exact host example.com.
	//   - "*.example.com": Matches subdomains of example.com.
	//   - "**.example.com": matches example.com, and all levels of subdomains.
	//   - "{project}.example.com": Extracts the third level subdomain.
	//   - "{project=**}.example.com": Extracts the third level+ subdomains.
	//   - "{project=**}": Extracts the entire host.
	HostPatterns []string `protobuf:"bytes,1,rep,name=host_patterns,json=hostPatterns,proto3" json:"host_patterns,omitempty"`
	// path_pattern is an ordered list of path template patterns for the desired
	// value.  If any path_pattern values are specified, then at least one must
	// match, and the last one wins and sets any specified variables.  A path
	// consists of segments separated by slashes. Each segment is matched against
	// the segment in the pattern as follows:
	//   - "*": Matches any single segment.
	//   - "**": Matches zero or more segments (first or last part of path only).
	//   - "{<name>=...}": One or more segment capture, where "..." can be any
	//      template that does not include a capture.
	//   - "{<name>}": A single segment capture. Identical to {<name>=*}.
	// A custom method may also be specified by appending ":" and the custom
	// method name or "*" to indicate any custom method (including no custom
	// method).  For example, "/*/projects/{project_id}/**:*" extracts
	// `{project_id}` for any version, resource and custom method that includes
	// it.  By default, any custom method will be matched.
	//
	// Examples:
	//   - "/v1/{name=messages/*}": extracts a name like "messages/12345".
	//   - "/v1/messages/{message_id}": extracts a message_id like "12345".
	//   - "/v1/users/{user_id}/messages/{message_id}": extracts two key values.
	PathPatterns []string `protobuf:"bytes,2,rep,name=path_patterns,json=pathPatterns,proto3" json:"path_patterns,omitempty"`
	// List of query parameter names to try to match.
	// For example: ["parent", "name", "resource.name"]
	// We extract all the specified query_parameters (case-sensitively).  If any
	// are marked as "required_match" and are not present, this keybuilder fails
	// to match.  If a given parameter appears multiple times (?foo=a&foo=b) we
	// will report it as a comma-separated string (foo=a,b).
	QueryParameters []*NameMatcher `protobuf:"bytes,3,rep,name=query_parameters,json=queryParameters,proto3" json:"query_parameters,omitempty"`
	// List of headers to try to match.
	// We extract all the specified header values (case-insensitively).  If any
	// are marked as "required_match" and are not present, this keybuilder fails
	// to match.  If a given header appears multiple times in the request we will
	// report it as a comma-separated string, in standard HTTP fashion.
	Headers              []*NameMatcher `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *HttpKeyBuilder) Reset()         { *m = HttpKeyBuilder{} }
func (m *HttpKeyBuilder) String() string { return proto.CompactTextString(m) }
func (*HttpKeyBuilder) ProtoMessage()    {}
func (*HttpKeyBuilder) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fe74d4f6e8f01c1, []int{2}
}

func (m *HttpKeyBuilder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpKeyBuilder.Unmarshal(m, b)
}
func (m *HttpKeyBuilder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpKeyBuilder.Marshal(b, m, deterministic)
}
func (m *HttpKeyBuilder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpKeyBuilder.Merge(m, src)
}
func (m *HttpKeyBuilder) XXX_Size() int {
	return xxx_messageInfo_HttpKeyBuilder.Size(m)
}
func (m *HttpKeyBuilder) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpKeyBuilder.DiscardUnknown(m)
}

var xxx_messageInfo_HttpKeyBuilder proto.InternalMessageInfo

func (m *HttpKeyBuilder) GetHostPatterns() []string {
	if m != nil {
		return m.HostPatterns
	}
	return nil
}

func (m *HttpKeyBuilder) GetPathPatterns() []string {
	if m != nil {
		return m.PathPatterns
	}
	return nil
}

func (m *HttpKeyBuilder) GetQueryParameters() []*NameMatcher {
	if m != nil {
		return m.QueryParameters
	}
	return nil
}

func (m *HttpKeyBuilder) GetHeaders() []*NameMatcher {
	if m != nil {
		return m.Headers
	}
	return nil
}

type RouteLookupConfig struct {
	// Ordered specifications for constructing keys for HTTP requests.  Last
	// match wins.  If no HttpKeyBuilder matches, an empty key_map will be sent to
	// the lookup service; it should likely reply with a global default route
	// and raise an alert.
	HttpKeybuilders []*HttpKeyBuilder `protobuf:"bytes,1,rep,name=http_keybuilders,json=httpKeybuilders,proto3" json:"http_keybuilders,omitempty"`
	// Unordered specifications for constructing keys for gRPC requests.  All
	// GrpcKeyBuilders on this list must have unique "name" fields so that the
	// client is free to prebuild a hash map keyed by name.  If no GrpcKeyBuilder
	// matches, an empty key_map will be sent to the lookup service; it should
	// likely reply with a global default route and raise an alert.
	GrpcKeybuilders []*GrpcKeyBuilder `protobuf:"bytes,2,rep,name=grpc_keybuilders,json=grpcKeybuilders,proto3" json:"grpc_keybuilders,omitempty"`
	// The name of the lookup service as a gRPC URI.  Typically, this will be
	// a subdomain of the target, such as "lookup.datastore.googleapis.com".
	LookupService string `protobuf:"bytes,3,opt,name=lookup_service,json=lookupService,proto3" json:"lookup_service,omitempty"`
	// Configure a timeout value for lookup service requests.
	// Defaults to 10 seconds if not specified.
	LookupServiceTimeout *duration.Duration `protobuf:"bytes,4,opt,name=lookup_service_timeout,json=lookupServiceTimeout,proto3" json:"lookup_service_timeout,omitempty"`
	// How long are responses valid for (like HTTP Cache-Control).
	// If omitted or zero, the longest valid cache time is used.
	// This value is clamped to 5 minutes to avoid unflushable bad responses.
	MaxAge *duration.Duration `protobuf:"bytes,5,opt,name=max_age,json=maxAge,proto3" json:"max_age,omitempty"`
	// After a response has been in the client cache for this amount of time
	// and is re-requested, start an asynchronous RPC to re-validate it.
	// This value should be less than max_age by at least the length of a
	// typical RTT to the Route Lookup Service to fully mask the RTT latency.
	// If omitted, keys are only re-requested after they have expired.
	StaleAge *duration.Duration `protobuf:"bytes,6,opt,name=stale_age,json=staleAge,proto3" json:"stale_age,omitempty"`
	// Rough indicator of amount of memory to use for the client cache.  Some of
	// the data structure overhead is not accounted for, so actual memory consumed
	// will be somewhat greater than this value.  If this field is omitted or set
	// to zero, a client default will be used.  The value may be capped to a lower
	// amount based on client configuration.
	CacheSizeBytes int64 `protobuf:"varint,7,opt,name=cache_size_bytes,json=cacheSizeBytes,proto3" json:"cache_size_bytes,omitempty"`
	// This is a list of all the possible targets that can be returned by the
	// lookup service.  If a target not on this list is returned, it will be
	// treated the same as an unhealthy target.
	ValidTargets []string `protobuf:"bytes,8,rep,name=valid_targets,json=validTargets,proto3" json:"valid_targets,omitempty"`
	// This value provides a default target to use if needed.  If set, it will be
	// used if RLS returns an error, times out, or returns an invalid response.
	// Note that requests can be routed only to a subdomain of the original
	// target, e.g. "us_east_1.cloudbigtable.googleapis.com".
	DefaultTarget        string   `protobuf:"bytes,9,opt,name=default_target,json=defaultTarget,proto3" json:"default_target,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteLookupConfig) Reset()         { *m = RouteLookupConfig{} }
func (m *RouteLookupConfig) String() string { return proto.CompactTextString(m) }
func (*RouteLookupConfig) ProtoMessage()    {}
func (*RouteLookupConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5fe74d4f6e8f01c1, []int{3}
}

func (m *RouteLookupConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteLookupConfig.Unmarshal(m, b)
}
func (m *RouteLookupConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteLookupConfig.Marshal(b, m, deterministic)
}
func (m *RouteLookupConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteLookupConfig.Merge(m, src)
}
func (m *RouteLookupConfig) XXX_Size() int {
	return xxx_messageInfo_RouteLookupConfig.Size(m)
}
func (m *RouteLookupConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteLookupConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RouteLookupConfig proto.InternalMessageInfo

func (m *RouteLookupConfig) GetHttpKeybuilders() []*HttpKeyBuilder {
	if m != nil {
		return m.HttpKeybuilders
	}
	return nil
}

func (m *RouteLookupConfig) GetGrpcKeybuilders() []*GrpcKeyBuilder {
	if m != nil {
		return m.GrpcKeybuilders
	}
	return nil
}

func (m *RouteLookupConfig) GetLookupService() string {
	if m != nil {
		return m.LookupService
	}
	return ""
}

func (m *RouteLookupConfig) GetLookupServiceTimeout() *duration.Duration {
	if m != nil {
		return m.LookupServiceTimeout
	}
	return nil
}

func (m *RouteLookupConfig) GetMaxAge() *duration.Duration {
	if m != nil {
		return m.MaxAge
	}
	return nil
}

func (m *RouteLookupConfig) GetStaleAge() *duration.Duration {
	if m != nil {
		return m.StaleAge
	}
	return nil
}

func (m *RouteLookupConfig) GetCacheSizeBytes() int64 {
	if m != nil {
		return m.CacheSizeBytes
	}
	return 0
}

func (m *RouteLookupConfig) GetValidTargets() []string {
	if m != nil {
		return m.ValidTargets
	}
	return nil
}

func (m *RouteLookupConfig) GetDefaultTarget() string {
	if m != nil {
		return m.DefaultTarget
	}
	return ""
}

func init() {
	proto.RegisterType((*NameMatcher)(nil), "grpc.lookup.v1.NameMatcher")
	proto.RegisterType((*GrpcKeyBuilder)(nil), "grpc.lookup.v1.GrpcKeyBuilder")
	proto.RegisterType((*GrpcKeyBuilder_Name)(nil), "grpc.lookup.v1.GrpcKeyBuilder.Name")
	proto.RegisterType((*HttpKeyBuilder)(nil), "grpc.lookup.v1.HttpKeyBuilder")
	proto.RegisterType((*RouteLookupConfig)(nil), "grpc.lookup.v1.RouteLookupConfig")
}

func init() { proto.RegisterFile("grpc/lookup/v1/rls_config.proto", fileDescriptor_5fe74d4f6e8f01c1) }

var fileDescriptor_5fe74d4f6e8f01c1 = []byte{
	// 615 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xed, 0x6a, 0xdb, 0x30,
	0x14, 0xc5, 0x75, 0x9a, 0x0f, 0xa5, 0x75, 0x53, 0x53, 0x8a, 0xd7, 0x42, 0x17, 0x52, 0x0a, 0xfe,
	0x31, 0x1c, 0x9a, 0xb1, 0xb1, 0xfd, 0x5c, 0x36, 0xf6, 0xfd, 0x11, 0xdc, 0xfe, 0x1a, 0x03, 0xa1,
	0xd8, 0xb7, 0xb2, 0xa9, 0x1d, 0xb9, 0x92, 0x1c, 0x9a, 0x3e, 0xd0, 0x9e, 0x62, 0x2f, 0xb2, 0xb7,
	0x19, 0x92, 0xec, 0x2e, 0x2e, 0x83, 0xec, 0x5f, 0xee, 0xd1, 0x39, 0x27, 0x3a, 0xf7, 0x5e, 0x19,
	0x3d, 0xa6, 0xbc, 0x88, 0xc6, 0x19, 0x63, 0xd7, 0x65, 0x31, 0x5e, 0x9e, 0x8f, 0x79, 0x26, 0x70,
	0xc4, 0x16, 0x57, 0x29, 0x0d, 0x0a, 0xce, 0x24, 0x73, 0x1d, 0x45, 0x08, 0x0c, 0x21, 0x58, 0x9e,
	0x1f, 0x9d, 0x50, 0xc6, 0x68, 0x06, 0x63, 0x7d, 0x3a, 0x2f, 0xaf, 0xc6, 0x71, 0xc9, 0x89, 0x4c,
	0xd9, 0xc2, 0xf0, 0x47, 0x3f, 0x50, 0xff, 0x2b, 0xc9, 0xe1, 0x0b, 0x91, 0x51, 0x02, 0xdc, 0x1d,
	0x20, 0xfb, 0x1a, 0x56, 0x9e, 0x35, 0xb4, 0xfc, 0x5e, 0xa8, 0x7e, 0xba, 0x07, 0x68, 0x7b, 0x41,
	0x72, 0x10, 0xde, 0xd6, 0xd0, 0xf6, 0x7b, 0xa1, 0x29, 0xdc, 0x33, 0xe4, 0x70, 0xb8, 0x29, 0x53,
	0x0e, 0x31, 0xce, 0x95, 0xd6, 0xb3, 0x87, 0x96, 0xdf, 0x0d, 0x77, 0x6b, 0x54, 0x1b, 0x8e, 0x7e,
	0x59, 0xc8, 0x79, 0xc7, 0x8b, 0xe8, 0x13, 0xac, 0xa6, 0x65, 0x9a, 0xc5, 0xc0, 0xdd, 0x97, 0xb5,
	0x9f, 0x35, 0xb4, 0xfd, 0xfe, 0xe4, 0x34, 0x68, 0x5e, 0x38, 0x68, 0xd2, 0x03, 0x75, 0xb9, 0xfa,
	0x4f, 0x9f, 0xa1, 0x4e, 0x02, 0x24, 0x06, 0x6e, 0x2e, 0xd3, 0x9f, 0x1c, 0x3f, 0x14, 0xaf, 0x45,
	0x09, 0x6b, 0xee, 0xd1, 0x0b, 0xd4, 0x52, 0xb8, 0xeb, 0xa1, 0x8e, 0x00, 0xbe, 0x4c, 0x23, 0xa8,
	0xf2, 0xd5, 0xa5, 0x7b, 0x88, 0xda, 0x39, 0xc8, 0x84, 0xc5, 0xde, 0x96, 0x3e, 0xa8, 0xaa, 0xd1,
	0x6f, 0x0b, 0x39, 0xef, 0xa5, 0x2c, 0xd6, 0xae, 0x7f, 0x8a, 0x76, 0x13, 0x26, 0x24, 0x2e, 0x88,
	0x94, 0xc0, 0x17, 0x26, 0x46, 0x2f, 0xdc, 0x51, 0xe0, 0xac, 0xc2, 0x14, 0xa9, 0x20, 0x32, 0xf9,
	0x4b, 0x32, 0xbd, 0xdb, 0x51, 0xe0, 0x3d, 0xe9, 0x2d, 0x1a, 0xdc, 0x94, 0xc0, 0x57, 0xb8, 0x20,
	0x9c, 0xe4, 0x20, 0x55, 0x2c, 0x7b, 0x73, 0xac, 0x3d, 0x2d, 0x9a, 0xdd, 0x6b, 0xd6, 0xbb, 0xd2,
	0xfa, 0xff, 0xae, 0x8c, 0x7e, 0xb6, 0xd0, 0x7e, 0xc8, 0x4a, 0x09, 0x9f, 0x35, 0xef, 0xb5, 0x5e,
	0x22, 0xf7, 0x03, 0x1a, 0x24, 0x52, 0x16, 0xf8, 0x1a, 0x56, 0x73, 0x93, 0xb8, 0x1e, 0xd4, 0xc9,
	0x43, 0xd7, 0x66, 0x63, 0xc2, 0xbd, 0xc4, 0xd4, 0xb5, 0x4c, 0x59, 0x29, 0x45, 0xc3, 0x6a, 0xeb,
	0xdf, 0x56, 0xcd, 0x99, 0x87, 0x7b, 0xd4, 0xd4, 0xf7, 0x56, 0x67, 0xc8, 0x31, 0x64, 0x5c, 0x0f,
	0xd0, 0xd6, 0x73, 0xda, 0x35, 0xe8, 0x45, 0x35, 0xc6, 0x6f, 0xe8, 0xb0, 0x49, 0xc3, 0x32, 0xcd,
	0x81, 0x95, 0xd2, 0x6b, 0x0d, 0x2d, 0xbf, 0x3f, 0x79, 0x14, 0x98, 0xc7, 0x10, 0xd4, 0x8f, 0x21,
	0x78, 0x53, 0x3d, 0x86, 0xf0, 0xa0, 0xe1, 0x74, 0x69, 0x64, 0xee, 0x04, 0x75, 0x72, 0x72, 0x8b,
	0x09, 0x05, 0x6f, 0x7b, 0x93, 0x43, 0x3b, 0x27, 0xb7, 0xaf, 0x28, 0xb8, 0xcf, 0x51, 0x4f, 0x48,
	0x92, 0x81, 0x56, 0xb5, 0x37, 0xa9, 0xba, 0x9a, 0xab, 0x74, 0x3e, 0x1a, 0x44, 0x24, 0x4a, 0x00,
	0x8b, 0xf4, 0x0e, 0xf0, 0x7c, 0x25, 0x41, 0x78, 0x9d, 0xa1, 0xe5, 0xdb, 0xa1, 0xa3, 0xf1, 0x8b,
	0xf4, 0x0e, 0xa6, 0x0a, 0x55, 0xdb, 0xb5, 0x24, 0x59, 0x1a, 0x63, 0x49, 0x38, 0x05, 0x29, 0xbc,
	0xae, 0xd9, 0x2e, 0x0d, 0x5e, 0x1a, 0x4c, 0xb5, 0x2c, 0x86, 0x2b, 0x52, 0x66, 0xb2, 0xa2, 0x79,
	0x3d, 0xd3, 0xb2, 0x0a, 0x35, 0xbc, 0x8f, 0xad, 0x2e, 0x1a, 0xf4, 0xc3, 0x63, 0xf5, 0x6a, 0x41,
	0x6d, 0x35, 0x67, 0x11, 0x08, 0x91, 0x2e, 0x28, 0x16, 0x92, 0x13, 0x09, 0x74, 0x35, 0xbd, 0x40,
	0xfb, 0x29, 0x7b, 0x30, 0xb1, 0xa9, 0x13, 0x66, 0xc2, 0xac, 0xcc, 0x4c, 0x65, 0x9a, 0x59, 0xdf,
	0x9f, 0x54, 0x19, 0x29, 0xcb, 0xc8, 0x82, 0x06, 0x8c, 0xd3, 0xf1, 0xfa, 0xb7, 0x4a, 0xaf, 0x42,
	0x35, 0x9d, 0xe5, 0xf9, 0xbc, 0xad, 0x5b, 0xf1, 0xf4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
	0xaa, 0xbd, 0xb2, 0xd0, 0x04, 0x00, 0x00,
}
