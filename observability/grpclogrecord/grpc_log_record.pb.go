// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: observability/grpclogrecord/grpc_log_record.proto

package grpclogrecord

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EventType int32

const (
	EventType_GRPC_LOG_UNKNOWN              EventType = 0
	EventType_GRPC_CALL_START               EventType = 1
	EventType_GRPC_CALL_END                 EventType = 2
	EventType_GRPC_CALL_REQUEST_HEADER      EventType = 3
	EventType_GRPC_CALL_RESPONSE_HEADER     EventType = 4
	EventType_GRPC_CALL_REQUEST_MESSAGE     EventType = 5
	EventType_GRPC_CALL_RESPONSE_MESSAGE    EventType = 6
	EventType_GRPC_CALL_TRAILER             EventType = 7
	EventType_GRPC_ERROR_UNAVAILABLE        EventType = 21
	EventType_GRPC_ERROR_UNAUTHENTICATED    EventType = 22
	EventType_GRPC_ERROR_RESOURCE_EXHAUSTED EventType = 23
	EventType_GRPC_ERROR_INVALID_ARGUMENT   EventType = 24
	EventType_GRPC_ERROR_INTERNAL           EventType = 25
	EventType_GRPC_ERROR_UNKNOWN            EventType = 26
	EventType_GRPC_ERROR_DEADLINE_EXCEEDED  EventType = 27
	EventType_GRPC_ERROR_ABORTED            EventType = 28
	EventType_GRPC_CALL_HALF_CLOSE          EventType = 31
	EventType_GRPC_CALL_CANCEL              EventType = 32
	EventType_GRPC_CONNECTION_STATE_CHANGED EventType = 41
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "GRPC_LOG_UNKNOWN",
		1:  "GRPC_CALL_START",
		2:  "GRPC_CALL_END",
		3:  "GRPC_CALL_REQUEST_HEADER",
		4:  "GRPC_CALL_RESPONSE_HEADER",
		5:  "GRPC_CALL_REQUEST_MESSAGE",
		6:  "GRPC_CALL_RESPONSE_MESSAGE",
		7:  "GRPC_CALL_TRAILER",
		21: "GRPC_ERROR_UNAVAILABLE",
		22: "GRPC_ERROR_UNAUTHENTICATED",
		23: "GRPC_ERROR_RESOURCE_EXHAUSTED",
		24: "GRPC_ERROR_INVALID_ARGUMENT",
		25: "GRPC_ERROR_INTERNAL",
		26: "GRPC_ERROR_UNKNOWN",
		27: "GRPC_ERROR_DEADLINE_EXCEEDED",
		28: "GRPC_ERROR_ABORTED",
		31: "GRPC_CALL_HALF_CLOSE",
		32: "GRPC_CALL_CANCEL",
		41: "GRPC_CONNECTION_STATE_CHANGED",
	}
	EventType_value = map[string]int32{
		"GRPC_LOG_UNKNOWN":              0,
		"GRPC_CALL_START":               1,
		"GRPC_CALL_END":                 2,
		"GRPC_CALL_REQUEST_HEADER":      3,
		"GRPC_CALL_RESPONSE_HEADER":     4,
		"GRPC_CALL_REQUEST_MESSAGE":     5,
		"GRPC_CALL_RESPONSE_MESSAGE":    6,
		"GRPC_CALL_TRAILER":             7,
		"GRPC_ERROR_UNAVAILABLE":        21,
		"GRPC_ERROR_UNAUTHENTICATED":    22,
		"GRPC_ERROR_RESOURCE_EXHAUSTED": 23,
		"GRPC_ERROR_INVALID_ARGUMENT":   24,
		"GRPC_ERROR_INTERNAL":           25,
		"GRPC_ERROR_UNKNOWN":            26,
		"GRPC_ERROR_DEADLINE_EXCEEDED":  27,
		"GRPC_ERROR_ABORTED":            28,
		"GRPC_CALL_HALF_CLOSE":          31,
		"GRPC_CALL_CANCEL":              32,
		"GRPC_CONNECTION_STATE_CHANGED": 41,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_observability_grpclogrecord_grpc_log_record_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_observability_grpclogrecord_grpc_log_record_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP(), []int{0}
}

type EventLogger int32

const (
	EventLogger_LOGGER_UNKNOWN EventLogger = 0
	EventLogger_LOGGER_CLIENT  EventLogger = 1
	EventLogger_LOGGER_SERVER  EventLogger = 2
)

// Enum value maps for EventLogger.
var (
	EventLogger_name = map[int32]string{
		0: "LOGGER_UNKNOWN",
		1: "LOGGER_CLIENT",
		2: "LOGGER_SERVER",
	}
	EventLogger_value = map[string]int32{
		"LOGGER_UNKNOWN": 0,
		"LOGGER_CLIENT":  1,
		"LOGGER_SERVER":  2,
	}
)

func (x EventLogger) Enum() *EventLogger {
	p := new(EventLogger)
	*p = x
	return p
}

func (x EventLogger) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventLogger) Descriptor() protoreflect.EnumDescriptor {
	return file_observability_grpclogrecord_grpc_log_record_proto_enumTypes[1].Descriptor()
}

func (EventLogger) Type() protoreflect.EnumType {
	return &file_observability_grpclogrecord_grpc_log_record_proto_enumTypes[1]
}

func (x EventLogger) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventLogger.Descriptor instead.
func (EventLogger) EnumDescriptor() ([]byte, []int) {
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP(), []int{1}
}

type LogLevel int32

const (
	LogLevel_LOG_LEVEL_UNKNOWN LogLevel = 0
	LogLevel_LOG_LEVEL_TRACE   LogLevel = 1
	LogLevel_LOG_LEVEL_DEBUG   LogLevel = 2
	LogLevel_LOG_LEVEL_INFO    LogLevel = 3
	LogLevel_LOG_LEVEL_WARN    LogLevel = 4
	LogLevel_LOG_LEVEL_ERROR   LogLevel = 5
	LogLevel_LOG_LEVEL_FATAL   LogLevel = 6
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_UNKNOWN",
		1: "LOG_LEVEL_TRACE",
		2: "LOG_LEVEL_DEBUG",
		3: "LOG_LEVEL_INFO",
		4: "LOG_LEVEL_WARN",
		5: "LOG_LEVEL_ERROR",
		6: "LOG_LEVEL_FATAL",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_UNKNOWN": 0,
		"LOG_LEVEL_TRACE":   1,
		"LOG_LEVEL_DEBUG":   2,
		"LOG_LEVEL_INFO":    3,
		"LOG_LEVEL_WARN":    4,
		"LOG_LEVEL_ERROR":   5,
		"LOG_LEVEL_FATAL":   6,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_observability_grpclogrecord_grpc_log_record_proto_enumTypes[2].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_observability_grpclogrecord_grpc_log_record_proto_enumTypes[2]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP(), []int{2}
}

type ConnectionState int32

const (
	ConnectionState_CONNECTION_STATE_UNKNOWN           ConnectionState = 0
	ConnectionState_CONNECTION_STATE_CONNECTING        ConnectionState = 1
	ConnectionState_CONNECTION_STATE_READY             ConnectionState = 2
	ConnectionState_CONNECTION_STATE_TRANSIENT_FAILURE ConnectionState = 3
	ConnectionState_CONNECTION_STATE_IDLE              ConnectionState = 4
	ConnectionState_CONNECTION_STATE_SHUTDOWN          ConnectionState = 5
)

// Enum value maps for ConnectionState.
var (
	ConnectionState_name = map[int32]string{
		0: "CONNECTION_STATE_UNKNOWN",
		1: "CONNECTION_STATE_CONNECTING",
		2: "CONNECTION_STATE_READY",
		3: "CONNECTION_STATE_TRANSIENT_FAILURE",
		4: "CONNECTION_STATE_IDLE",
		5: "CONNECTION_STATE_SHUTDOWN",
	}
	ConnectionState_value = map[string]int32{
		"CONNECTION_STATE_UNKNOWN":           0,
		"CONNECTION_STATE_CONNECTING":        1,
		"CONNECTION_STATE_READY":             2,
		"CONNECTION_STATE_TRANSIENT_FAILURE": 3,
		"CONNECTION_STATE_IDLE":              4,
		"CONNECTION_STATE_SHUTDOWN":          5,
	}
)

func (x ConnectionState) Enum() *ConnectionState {
	p := new(ConnectionState)
	*p = x
	return p
}

func (x ConnectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_observability_grpclogrecord_grpc_log_record_proto_enumTypes[3].Descriptor()
}

func (ConnectionState) Type() protoreflect.EnumType {
	return &file_observability_grpclogrecord_grpc_log_record_proto_enumTypes[3]
}

func (x ConnectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionState.Descriptor instead.
func (ConnectionState) EnumDescriptor() ([]byte, []int) {
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP(), []int{3}
}

type MethodType int32

const (
	MethodType_METHOD_TYPE_UNKNOWN          MethodType = 0
	MethodType_METHOD_TYPE_UNARY            MethodType = 1
	MethodType_METHOD_TYPE_SERVER_STREAMING MethodType = 2
	MethodType_METHOD_TYPE_CLIENT_STREAMING MethodType = 3
	MethodType_METHOD_TYPE_BIDI_STREAMING   MethodType = 4
)

// Enum value maps for MethodType.
var (
	MethodType_name = map[int32]string{
		0: "METHOD_TYPE_UNKNOWN",
		1: "METHOD_TYPE_UNARY",
		2: "METHOD_TYPE_SERVER_STREAMING",
		3: "METHOD_TYPE_CLIENT_STREAMING",
		4: "METHOD_TYPE_BIDI_STREAMING",
	}
	MethodType_value = map[string]int32{
		"METHOD_TYPE_UNKNOWN":          0,
		"METHOD_TYPE_UNARY":            1,
		"METHOD_TYPE_SERVER_STREAMING": 2,
		"METHOD_TYPE_CLIENT_STREAMING": 3,
		"METHOD_TYPE_BIDI_STREAMING":   4,
	}
)

func (x MethodType) Enum() *MethodType {
	p := new(MethodType)
	*p = x
	return p
}

func (x MethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_observability_grpclogrecord_grpc_log_record_proto_enumTypes[4].Descriptor()
}

func (MethodType) Type() protoreflect.EnumType {
	return &file_observability_grpclogrecord_grpc_log_record_proto_enumTypes[4]
}

func (x MethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MethodType.Descriptor instead.
func (MethodType) EnumDescriptor() ([]byte, []int) {
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP(), []int{4}
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entry []*MetadataEntry `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetEntry() []*MetadataEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type MetadataEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MetadataEntry) Reset() {
	*x = MetadataEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataEntry) ProtoMessage() {}

func (x *MetadataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataEntry.ProtoReflect.Descriptor instead.
func (*MetadataEntry) Descriptor() ([]byte, []int) {
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP(), []int{1}
}

func (x *MetadataEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *MetadataEntry) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type EnvironmentTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GcpProjectId        string `protobuf:"bytes,1,opt,name=gcp_project_id,json=gcpProjectId,proto3" json:"gcp_project_id,omitempty"`
	GcpRegion           string `protobuf:"bytes,2,opt,name=gcp_region,json=gcpRegion,proto3" json:"gcp_region,omitempty"`
	GceNetworkInterface string `protobuf:"bytes,11,opt,name=gce_network_interface,json=gceNetworkInterface,proto3" json:"gce_network_interface,omitempty"`
	GceInstanceGroup    string `protobuf:"bytes,12,opt,name=gce_instance_group,json=gceInstanceGroup,proto3" json:"gce_instance_group,omitempty"`
	GkeCluster          string `protobuf:"bytes,21,opt,name=gke_cluster,json=gkeCluster,proto3" json:"gke_cluster,omitempty"`
	GkeNode             string `protobuf:"bytes,22,opt,name=gke_node,json=gkeNode,proto3" json:"gke_node,omitempty"`
	GkeApplication      string `protobuf:"bytes,23,opt,name=gke_application,json=gkeApplication,proto3" json:"gke_application,omitempty"`
	GkeContainer        string `protobuf:"bytes,24,opt,name=gke_container,json=gkeContainer,proto3" json:"gke_container,omitempty"`
	GkePod              string `protobuf:"bytes,25,opt,name=gke_pod,json=gkePod,proto3" json:"gke_pod,omitempty"`
	GkeNamespace        string `protobuf:"bytes,26,opt,name=gke_namespace,json=gkeNamespace,proto3" json:"gke_namespace,omitempty"`
}

func (x *EnvironmentTags) Reset() {
	*x = EnvironmentTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentTags) ProtoMessage() {}

func (x *EnvironmentTags) ProtoReflect() protoreflect.Message {
	mi := &file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentTags.ProtoReflect.Descriptor instead.
func (*EnvironmentTags) Descriptor() ([]byte, []int) {
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP(), []int{2}
}

func (x *EnvironmentTags) GetGcpProjectId() string {
	if x != nil {
		return x.GcpProjectId
	}
	return ""
}

func (x *EnvironmentTags) GetGcpRegion() string {
	if x != nil {
		return x.GcpRegion
	}
	return ""
}

func (x *EnvironmentTags) GetGceNetworkInterface() string {
	if x != nil {
		return x.GceNetworkInterface
	}
	return ""
}

func (x *EnvironmentTags) GetGceInstanceGroup() string {
	if x != nil {
		return x.GceInstanceGroup
	}
	return ""
}

func (x *EnvironmentTags) GetGkeCluster() string {
	if x != nil {
		return x.GkeCluster
	}
	return ""
}

func (x *EnvironmentTags) GetGkeNode() string {
	if x != nil {
		return x.GkeNode
	}
	return ""
}

func (x *EnvironmentTags) GetGkeApplication() string {
	if x != nil {
		return x.GkeApplication
	}
	return ""
}

func (x *EnvironmentTags) GetGkeContainer() string {
	if x != nil {
		return x.GkeContainer
	}
	return ""
}

func (x *EnvironmentTags) GetGkePod() string {
	if x != nil {
		return x.GkePod
	}
	return ""
}

func (x *EnvironmentTags) GetGkeNamespace() string {
	if x != nil {
		return x.GkeNamespace
	}
	return ""
}

type CustomTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CustomTags) Reset() {
	*x = CustomTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTags) ProtoMessage() {}

func (x *CustomTags) ProtoReflect() protoreflect.Message {
	mi := &file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTags.ProtoReflect.Descriptor instead.
func (*CustomTags) Descriptor() ([]byte, []int) {
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP(), []int{3}
}

func (x *CustomTags) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CustomTags) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type GrpcLogRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	RpcId           uint64                 `protobuf:"varint,2,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	ChannelId       int32                  `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	TraceId         uint64                 `protobuf:"varint,4,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	SpanId          uint64                 `protobuf:"varint,5,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	ServiceName     string                 `protobuf:"bytes,6,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	MethodName      string                 `protobuf:"bytes,7,opt,name=method_name,json=methodName,proto3" json:"method_name,omitempty"`
	EventLogger     EventLogger            `protobuf:"varint,8,opt,name=event_logger,json=eventLogger,proto3,enum=grpc.observability.grpclogrecord.EventLogger" json:"event_logger,omitempty"`
	EventType       EventType              `protobuf:"varint,9,opt,name=event_type,json=eventType,proto3,enum=grpc.observability.grpclogrecord.EventType" json:"event_type,omitempty"`
	LogLevel        LogLevel               `protobuf:"varint,10,opt,name=log_level,json=logLevel,proto3,enum=grpc.observability.grpclogrecord.LogLevel" json:"log_level,omitempty"`
	EnvironmentTags *EnvironmentTags       `protobuf:"bytes,11,opt,name=environment_tags,json=environmentTags,proto3" json:"environment_tags,omitempty"`
	CustomTags      *CustomTags            `protobuf:"bytes,12,opt,name=custom_tags,json=customTags,proto3" json:"custom_tags,omitempty"`
	ConnectionState ConnectionState        `protobuf:"varint,21,opt,name=connection_state,json=connectionState,proto3,enum=grpc.observability.grpclogrecord.ConnectionState" json:"connection_state,omitempty"`
	Timeout         int32                  `protobuf:"varint,22,opt,name=timeout,proto3" json:"timeout,omitempty"`
	MethodType      MethodType             `protobuf:"varint,23,opt,name=method_type,json=methodType,proto3,enum=grpc.observability.grpclogrecord.MethodType" json:"method_type,omitempty"`
	Authority       string                 `protobuf:"bytes,24,opt,name=authority,proto3" json:"authority,omitempty"`
	ClientPublicIp  string                 `protobuf:"bytes,25,opt,name=client_public_ip,json=clientPublicIp,proto3" json:"client_public_ip,omitempty"`
	ClientPrivateIp string                 `protobuf:"bytes,26,opt,name=client_private_ip,json=clientPrivateIp,proto3" json:"client_private_ip,omitempty"`
	ServerPublicIp  string                 `protobuf:"bytes,27,opt,name=server_public_ip,json=serverPublicIp,proto3" json:"server_public_ip,omitempty"`
	ServerPrivateIp string                 `protobuf:"bytes,28,opt,name=server_private_ip,json=serverPrivateIp,proto3" json:"server_private_ip,omitempty"`
	PayloadSize     int32                  `protobuf:"varint,31,opt,name=payload_size,json=payloadSize,proto3" json:"payload_size,omitempty"`
	Metadata        *Metadata              `protobuf:"bytes,32,opt,name=metadata,proto3" json:"metadata,omitempty"`
	SequenceNumber  int32                  `protobuf:"varint,33,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Message         []byte                 `protobuf:"bytes,34,opt,name=message,proto3" json:"message,omitempty"`
	Trailers        *Metadata              `protobuf:"bytes,35,opt,name=trailers,proto3" json:"trailers,omitempty"`
	StatusCode      int32                  `protobuf:"varint,36,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	StatusMessage   string                 `protobuf:"bytes,37,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	StatusDetails   []byte                 `protobuf:"bytes,38,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
	Duration        *durationpb.Duration   `protobuf:"bytes,39,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (x *GrpcLogRecord) Reset() {
	*x = GrpcLogRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcLogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcLogRecord) ProtoMessage() {}

func (x *GrpcLogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcLogRecord.ProtoReflect.Descriptor instead.
func (*GrpcLogRecord) Descriptor() ([]byte, []int) {
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP(), []int{4}
}

func (x *GrpcLogRecord) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GrpcLogRecord) GetRpcId() uint64 {
	if x != nil {
		return x.RpcId
	}
	return 0
}

func (x *GrpcLogRecord) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *GrpcLogRecord) GetTraceId() uint64 {
	if x != nil {
		return x.TraceId
	}
	return 0
}

func (x *GrpcLogRecord) GetSpanId() uint64 {
	if x != nil {
		return x.SpanId
	}
	return 0
}

func (x *GrpcLogRecord) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GrpcLogRecord) GetMethodName() string {
	if x != nil {
		return x.MethodName
	}
	return ""
}

func (x *GrpcLogRecord) GetEventLogger() EventLogger {
	if x != nil {
		return x.EventLogger
	}
	return EventLogger_LOGGER_UNKNOWN
}

func (x *GrpcLogRecord) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_GRPC_LOG_UNKNOWN
}

func (x *GrpcLogRecord) GetLogLevel() LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return LogLevel_LOG_LEVEL_UNKNOWN
}

func (x *GrpcLogRecord) GetEnvironmentTags() *EnvironmentTags {
	if x != nil {
		return x.EnvironmentTags
	}
	return nil
}

func (x *GrpcLogRecord) GetCustomTags() *CustomTags {
	if x != nil {
		return x.CustomTags
	}
	return nil
}

func (x *GrpcLogRecord) GetConnectionState() ConnectionState {
	if x != nil {
		return x.ConnectionState
	}
	return ConnectionState_CONNECTION_STATE_UNKNOWN
}

func (x *GrpcLogRecord) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *GrpcLogRecord) GetMethodType() MethodType {
	if x != nil {
		return x.MethodType
	}
	return MethodType_METHOD_TYPE_UNKNOWN
}

func (x *GrpcLogRecord) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *GrpcLogRecord) GetClientPublicIp() string {
	if x != nil {
		return x.ClientPublicIp
	}
	return ""
}

func (x *GrpcLogRecord) GetClientPrivateIp() string {
	if x != nil {
		return x.ClientPrivateIp
	}
	return ""
}

func (x *GrpcLogRecord) GetServerPublicIp() string {
	if x != nil {
		return x.ServerPublicIp
	}
	return ""
}

func (x *GrpcLogRecord) GetServerPrivateIp() string {
	if x != nil {
		return x.ServerPrivateIp
	}
	return ""
}

func (x *GrpcLogRecord) GetPayloadSize() int32 {
	if x != nil {
		return x.PayloadSize
	}
	return 0
}

func (x *GrpcLogRecord) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GrpcLogRecord) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *GrpcLogRecord) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *GrpcLogRecord) GetTrailers() *Metadata {
	if x != nil {
		return x.Trailers
	}
	return nil
}

func (x *GrpcLogRecord) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *GrpcLogRecord) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *GrpcLogRecord) GetStatusDetails() []byte {
	if x != nil {
		return x.StatusDetails
	}
	return nil
}

func (x *GrpcLogRecord) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

var File_observability_grpclogrecord_grpc_log_record_proto protoreflect.FileDescriptor

var file_observability_grpclogrecord_grpc_log_record_proto_rawDesc = []byte{
	0x0a, 0x31, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x67, 0x72,
	0x70, 0x63, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x37, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x0f, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x63, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x63, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x67,
	0x63, 0x65, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x63, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x67, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x63, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x0a,
	0x0b, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x67, 0x6b, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x6b, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x6b, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x6b, 0x65,
	0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x67, 0x6b, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6b, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6b, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6b, 0x65, 0x5f, 0x70,
	0x6f, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6b, 0x65, 0x50, 0x6f, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x67, 0x6b, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6b, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x0a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb8, 0x0b, 0x0a, 0x0d,
	0x47, 0x72, 0x70, 0x63, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x6c, 0x6f, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5c, 0x0a, 0x10,
	0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x6c, 0x6f, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x52, 0x0f, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x52, 0x0a, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x6c, 0x6f, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x69, 0x70, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x46, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x9a, 0x04, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x4c, 0x4f, 0x47,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52,
	0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x1d, 0x0a, 0x19, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x12, 0x1e,
	0x0a, 0x1a, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x52, 0x41, 0x49,
	0x4c, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x16, 0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48, 0x41, 0x55, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x18, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x19, 0x12, 0x16,
	0x0a, 0x12, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x1a, 0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x58,
	0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x50, 0x43,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x1c,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x48, 0x41,
	0x4c, 0x46, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52,
	0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x20,
	0x12, 0x21, 0x0a, 0x1d, 0x47, 0x52, 0x50, 0x43, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x44, 0x10, 0x29, 0x2a, 0x47, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x9d, 0x01, 0x0a,
	0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x47,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x2a, 0xce, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x2a, 0xa0, 0x01,
	0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x49, 0x44, 0x49, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x42, 0x34, 0x5a, 0x32, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_observability_grpclogrecord_grpc_log_record_proto_rawDescOnce sync.Once
	file_observability_grpclogrecord_grpc_log_record_proto_rawDescData = file_observability_grpclogrecord_grpc_log_record_proto_rawDesc
)

func file_observability_grpclogrecord_grpc_log_record_proto_rawDescGZIP() []byte {
	file_observability_grpclogrecord_grpc_log_record_proto_rawDescOnce.Do(func() {
		file_observability_grpclogrecord_grpc_log_record_proto_rawDescData = protoimpl.X.CompressGZIP(file_observability_grpclogrecord_grpc_log_record_proto_rawDescData)
	})
	return file_observability_grpclogrecord_grpc_log_record_proto_rawDescData
}

var file_observability_grpclogrecord_grpc_log_record_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_observability_grpclogrecord_grpc_log_record_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_observability_grpclogrecord_grpc_log_record_proto_goTypes = []interface{}{
	(EventType)(0),                // 0: grpc.observability.grpclogrecord.EventType
	(EventLogger)(0),              // 1: grpc.observability.grpclogrecord.EventLogger
	(LogLevel)(0),                 // 2: grpc.observability.grpclogrecord.LogLevel
	(ConnectionState)(0),          // 3: grpc.observability.grpclogrecord.ConnectionState
	(MethodType)(0),               // 4: grpc.observability.grpclogrecord.MethodType
	(*Metadata)(nil),              // 5: grpc.observability.grpclogrecord.Metadata
	(*MetadataEntry)(nil),         // 6: grpc.observability.grpclogrecord.MetadataEntry
	(*EnvironmentTags)(nil),       // 7: grpc.observability.grpclogrecord.EnvironmentTags
	(*CustomTags)(nil),            // 8: grpc.observability.grpclogrecord.CustomTags
	(*GrpcLogRecord)(nil),         // 9: grpc.observability.grpclogrecord.GrpcLogRecord
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 11: google.protobuf.Duration
}
var file_observability_grpclogrecord_grpc_log_record_proto_depIdxs = []int32{
	6,  // 0: grpc.observability.grpclogrecord.Metadata.entry:type_name -> grpc.observability.grpclogrecord.MetadataEntry
	10, // 1: grpc.observability.grpclogrecord.GrpcLogRecord.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 2: grpc.observability.grpclogrecord.GrpcLogRecord.event_logger:type_name -> grpc.observability.grpclogrecord.EventLogger
	0,  // 3: grpc.observability.grpclogrecord.GrpcLogRecord.event_type:type_name -> grpc.observability.grpclogrecord.EventType
	2,  // 4: grpc.observability.grpclogrecord.GrpcLogRecord.log_level:type_name -> grpc.observability.grpclogrecord.LogLevel
	7,  // 5: grpc.observability.grpclogrecord.GrpcLogRecord.environment_tags:type_name -> grpc.observability.grpclogrecord.EnvironmentTags
	8,  // 6: grpc.observability.grpclogrecord.GrpcLogRecord.custom_tags:type_name -> grpc.observability.grpclogrecord.CustomTags
	3,  // 7: grpc.observability.grpclogrecord.GrpcLogRecord.connection_state:type_name -> grpc.observability.grpclogrecord.ConnectionState
	4,  // 8: grpc.observability.grpclogrecord.GrpcLogRecord.method_type:type_name -> grpc.observability.grpclogrecord.MethodType
	5,  // 9: grpc.observability.grpclogrecord.GrpcLogRecord.metadata:type_name -> grpc.observability.grpclogrecord.Metadata
	5,  // 10: grpc.observability.grpclogrecord.GrpcLogRecord.trailers:type_name -> grpc.observability.grpclogrecord.Metadata
	11, // 11: grpc.observability.grpclogrecord.GrpcLogRecord.duration:type_name -> google.protobuf.Duration
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_observability_grpclogrecord_grpc_log_record_proto_init() }
func file_observability_grpclogrecord_grpc_log_record_proto_init() {
	if File_observability_grpclogrecord_grpc_log_record_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_grpclogrecord_grpc_log_record_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcLogRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_observability_grpclogrecord_grpc_log_record_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_observability_grpclogrecord_grpc_log_record_proto_goTypes,
		DependencyIndexes: file_observability_grpclogrecord_grpc_log_record_proto_depIdxs,
		EnumInfos:         file_observability_grpclogrecord_grpc_log_record_proto_enumTypes,
		MessageInfos:      file_observability_grpclogrecord_grpc_log_record_proto_msgTypes,
	}.Build()
	File_observability_grpclogrecord_grpc_log_record_proto = out.File
	file_observability_grpclogrecord_grpc_log_record_proto_rawDesc = nil
	file_observability_grpclogrecord_grpc_log_record_proto_goTypes = nil
	file_observability_grpclogrecord_grpc_log_record_proto_depIdxs = nil
}
