// Copyright 2022 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Observability Config is used by gRPC Observability plugin to control provided
// observability features. It contains parameters to enable/disable certain
// features, or fine tune the verbosity.
//
// Note that gRPC may use this config in JSON form, not in protobuf form. This
// proto definition is intended to help document the schema but might not
// actually be used directly by gRPC.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: observability/internal/config/config.proto

package config

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Sampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sampler:
	//	*Sampler_RateLimiting
	//	*Sampler_Probabilistic
	//	*Sampler_Always
	//	*Sampler_Never
	Sampler isSampler_Sampler `protobuf_oneof:"sampler"`
}

func (x *Sampler) Reset() {
	*x = Sampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sampler) ProtoMessage() {}

func (x *Sampler) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sampler.ProtoReflect.Descriptor instead.
func (*Sampler) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{0}
}

func (m *Sampler) GetSampler() isSampler_Sampler {
	if m != nil {
		return m.Sampler
	}
	return nil
}

func (x *Sampler) GetRateLimiting() *Sampler_RateLimitingSampler {
	if x, ok := x.GetSampler().(*Sampler_RateLimiting); ok {
		return x.RateLimiting
	}
	return nil
}

func (x *Sampler) GetProbabilistic() *Sampler_ProbabilisticSampler {
	if x, ok := x.GetSampler().(*Sampler_Probabilistic); ok {
		return x.Probabilistic
	}
	return nil
}

func (x *Sampler) GetAlways() *Sampler_AlwaysSampler {
	if x, ok := x.GetSampler().(*Sampler_Always); ok {
		return x.Always
	}
	return nil
}

func (x *Sampler) GetNever() *Sampler_NeverSampler {
	if x, ok := x.GetSampler().(*Sampler_Never); ok {
		return x.Never
	}
	return nil
}

type isSampler_Sampler interface {
	isSampler_Sampler()
}

type Sampler_RateLimiting struct {
	RateLimiting *Sampler_RateLimitingSampler `protobuf:"bytes,1,opt,name=rate_limiting,json=rateLimiting,proto3,oneof"`
}

type Sampler_Probabilistic struct {
	Probabilistic *Sampler_ProbabilisticSampler `protobuf:"bytes,2,opt,name=probabilistic,proto3,oneof"`
}

type Sampler_Always struct {
	Always *Sampler_AlwaysSampler `protobuf:"bytes,3,opt,name=always,proto3,oneof"`
}

type Sampler_Never struct {
	Never *Sampler_NeverSampler `protobuf:"bytes,4,opt,name=never,proto3,oneof"`
}

func (*Sampler_RateLimiting) isSampler_Sampler() {}

func (*Sampler_Probabilistic) isSampler_Sampler() {}

func (*Sampler_Always) isSampler_Sampler() {}

func (*Sampler_Never) isSampler_Sampler() {}

// Configuration for observability behaviors. By default, no configuration is
// required for tracing/metrics/logging to function. This config captures the
// most common knobs for gRPC users. It's always possible to override with
// explicit config in code.
type ObservabilityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controls the exporter behavior
	ExporterConfig *ObservabilityConfig_ExporterConfig `protobuf:"bytes,1,opt,name=exporter_config,json=exporterConfig,proto3" json:"exporter_config,omitempty"`
	// Controls the tracing behavior
	TracingConfig *ObservabilityConfig_TracingConfig `protobuf:"bytes,2,opt,name=tracing_config,json=tracingConfig,proto3" json:"tracing_config,omitempty"`
	// Controls the metrics behavior
	MetricsConfig *ObservabilityConfig_MetricsConfig `protobuf:"bytes,3,opt,name=metrics_config,json=metricsConfig,proto3" json:"metrics_config,omitempty"`
	// Controls the logging behavior
	LoggingConfig *ObservabilityConfig_LoggingConfig `protobuf:"bytes,4,opt,name=logging_config,json=loggingConfig,proto3" json:"logging_config,omitempty"`
	// Controls the enhanced behavior for specific deployment environment
	DeploymentConfig *ObservabilityConfig_DeploymentConfig `protobuf:"bytes,5,opt,name=deployment_config,json=deploymentConfig,proto3" json:"deployment_config,omitempty"`
}

func (x *ObservabilityConfig) Reset() {
	*x = ObservabilityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityConfig) ProtoMessage() {}

func (x *ObservabilityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityConfig.ProtoReflect.Descriptor instead.
func (*ObservabilityConfig) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *ObservabilityConfig) GetExporterConfig() *ObservabilityConfig_ExporterConfig {
	if x != nil {
		return x.ExporterConfig
	}
	return nil
}

func (x *ObservabilityConfig) GetTracingConfig() *ObservabilityConfig_TracingConfig {
	if x != nil {
		return x.TracingConfig
	}
	return nil
}

func (x *ObservabilityConfig) GetMetricsConfig() *ObservabilityConfig_MetricsConfig {
	if x != nil {
		return x.MetricsConfig
	}
	return nil
}

func (x *ObservabilityConfig) GetLoggingConfig() *ObservabilityConfig_LoggingConfig {
	if x != nil {
		return x.LoggingConfig
	}
	return nil
}

func (x *ObservabilityConfig) GetDeploymentConfig() *ObservabilityConfig_DeploymentConfig {
	if x != nil {
		return x.DeploymentConfig
	}
	return nil
}

// RateLimitingSampler enforces the average data collection intervals
// between calls.
type Sampler_RateLimitingSampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default sample interval is 10s.
	SampleInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=sample_interval,json=sampleInterval,proto3" json:"sample_interval,omitempty"`
}

func (x *Sampler_RateLimitingSampler) Reset() {
	*x = Sampler_RateLimitingSampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sampler_RateLimitingSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sampler_RateLimitingSampler) ProtoMessage() {}

func (x *Sampler_RateLimitingSampler) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sampler_RateLimitingSampler.ProtoReflect.Descriptor instead.
func (*Sampler_RateLimitingSampler) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Sampler_RateLimitingSampler) GetSampleInterval() *durationpb.Duration {
	if x != nil {
		return x.SampleInterval
	}
	return nil
}

// ProbabilisticSampler picks calls via straightforward probability.
type Sampler_ProbabilisticSampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default tracing rate is 0.1.
	RateNumerator   uint32 `protobuf:"varint,1,opt,name=rate_numerator,json=rateNumerator,proto3" json:"rate_numerator,omitempty"`
	RateDenominator uint32 `protobuf:"varint,2,opt,name=rate_denominator,json=rateDenominator,proto3" json:"rate_denominator,omitempty"`
}

func (x *Sampler_ProbabilisticSampler) Reset() {
	*x = Sampler_ProbabilisticSampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sampler_ProbabilisticSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sampler_ProbabilisticSampler) ProtoMessage() {}

func (x *Sampler_ProbabilisticSampler) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sampler_ProbabilisticSampler.ProtoReflect.Descriptor instead.
func (*Sampler_ProbabilisticSampler) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Sampler_ProbabilisticSampler) GetRateNumerator() uint32 {
	if x != nil {
		return x.RateNumerator
	}
	return 0
}

func (x *Sampler_ProbabilisticSampler) GetRateDenominator() uint32 {
	if x != nil {
		return x.RateDenominator
	}
	return 0
}

// AlwaysSampler picks every call.
type Sampler_AlwaysSampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Sampler_AlwaysSampler) Reset() {
	*x = Sampler_AlwaysSampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sampler_AlwaysSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sampler_AlwaysSampler) ProtoMessage() {}

func (x *Sampler_AlwaysSampler) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sampler_AlwaysSampler.ProtoReflect.Descriptor instead.
func (*Sampler_AlwaysSampler) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{0, 2}
}

// NeverSampler disables sampling.
type Sampler_NeverSampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Sampler_NeverSampler) Reset() {
	*x = Sampler_NeverSampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sampler_NeverSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sampler_NeverSampler) ProtoMessage() {}

func (x *Sampler_NeverSampler) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sampler_NeverSampler.ProtoReflect.Descriptor instead.
func (*Sampler_NeverSampler) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{0, 3}
}

type ObservabilityConfig_ExporterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Following options turn off the default exporters, this allows
	// applications to use custom exporters without duplicated uploads.
	DisableDefaultTracingExporter bool `protobuf:"varint,1,opt,name=disable_default_tracing_exporter,json=disableDefaultTracingExporter,proto3" json:"disable_default_tracing_exporter,omitempty"`
	DisableDefaultMetricsExporter bool `protobuf:"varint,2,opt,name=disable_default_metrics_exporter,json=disableDefaultMetricsExporter,proto3" json:"disable_default_metrics_exporter,omitempty"`
	DisableDefaultLoggingExporter bool `protobuf:"varint,3,opt,name=disable_default_logging_exporter,json=disableDefaultLoggingExporter,proto3" json:"disable_default_logging_exporter,omitempty"`
	// The project identifier.
	ProjectId string `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The reporting interval for all observability data for default exporters.
	ReportingInterval *durationpb.Duration `protobuf:"bytes,5,opt,name=reporting_interval,json=reportingInterval,proto3" json:"reporting_interval,omitempty"`
}

func (x *ObservabilityConfig_ExporterConfig) Reset() {
	*x = ObservabilityConfig_ExporterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityConfig_ExporterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityConfig_ExporterConfig) ProtoMessage() {}

func (x *ObservabilityConfig_ExporterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityConfig_ExporterConfig.ProtoReflect.Descriptor instead.
func (*ObservabilityConfig_ExporterConfig) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ObservabilityConfig_ExporterConfig) GetDisableDefaultTracingExporter() bool {
	if x != nil {
		return x.DisableDefaultTracingExporter
	}
	return false
}

func (x *ObservabilityConfig_ExporterConfig) GetDisableDefaultMetricsExporter() bool {
	if x != nil {
		return x.DisableDefaultMetricsExporter
	}
	return false
}

func (x *ObservabilityConfig_ExporterConfig) GetDisableDefaultLoggingExporter() bool {
	if x != nil {
		return x.DisableDefaultLoggingExporter
	}
	return false
}

func (x *ObservabilityConfig_ExporterConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ObservabilityConfig_ExporterConfig) GetReportingInterval() *durationpb.Duration {
	if x != nil {
		return x.ReportingInterval
	}
	return nil
}

type ObservabilityConfig_TracingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the sampling algorithm and behavior. The default sampler is
	// RateLimitingSampler with 10s interval.
	Sampler *Sampler `protobuf:"bytes,1,opt,name=sampler,proto3" json:"sampler,omitempty"`
}

func (x *ObservabilityConfig_TracingConfig) Reset() {
	*x = ObservabilityConfig_TracingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityConfig_TracingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityConfig_TracingConfig) ProtoMessage() {}

func (x *ObservabilityConfig_TracingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityConfig_TracingConfig.ProtoReflect.Descriptor instead.
func (*ObservabilityConfig_TracingConfig) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ObservabilityConfig_TracingConfig) GetSampler() *Sampler {
	if x != nil {
		return x.Sampler
	}
	return nil
}

type ObservabilityConfig_MetricsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObservabilityConfig_MetricsConfig) Reset() {
	*x = ObservabilityConfig_MetricsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityConfig_MetricsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityConfig_MetricsConfig) ProtoMessage() {}

func (x *ObservabilityConfig_MetricsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityConfig_MetricsConfig.ProtoReflect.Descriptor instead.
func (*ObservabilityConfig_MetricsConfig) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{1, 2}
}

type ObservabilityConfig_LoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of method config. The order matters here - the first pattern which
	// matches the current method will apply the associated config options in
	// the LogFilter. Any other LogFilter that also matches that comes later
	// will be ignored. So a LogFilter of "*/*" should appear last in this list.
	LogFilters []*ObservabilityConfig_LoggingConfig_LogFilter `protobuf:"bytes,1,rep,name=log_filters,json=logFilters,proto3" json:"log_filters,omitempty"`
}

func (x *ObservabilityConfig_LoggingConfig) Reset() {
	*x = ObservabilityConfig_LoggingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityConfig_LoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityConfig_LoggingConfig) ProtoMessage() {}

func (x *ObservabilityConfig_LoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityConfig_LoggingConfig.ProtoReflect.Descriptor instead.
func (*ObservabilityConfig_LoggingConfig) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{1, 3}
}

func (x *ObservabilityConfig_LoggingConfig) GetLogFilters() []*ObservabilityConfig_LoggingConfig_LogFilter {
	if x != nil {
		return x.LogFilters
	}
	return nil
}

type ObservabilityConfig_DeploymentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObservabilityConfig_DeploymentConfig) Reset() {
	*x = ObservabilityConfig_DeploymentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityConfig_DeploymentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityConfig_DeploymentConfig) ProtoMessage() {}

func (x *ObservabilityConfig_DeploymentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityConfig_DeploymentConfig.ProtoReflect.Descriptor instead.
func (*ObservabilityConfig_DeploymentConfig) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{1, 4}
}

type ObservabilityConfig_LoggingConfig_LogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A string which can select a group of method names. Only "*" wildcard
	// is accepted.
	// Examples:
	// - "Foo/Bar" selects only the method "Bar" from service "Foo"
	// - "Foo/*" selects all methods from service "Foo"
	// - "*/*" selects all methods from all services.
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// Number of bytes of each header to log. If the size of the header is
	// greater than the defined limit, content pass the limit will be
	// truncated. The default value is 0.
	HeaderBytes int32 `protobuf:"varint,2,opt,name=header_bytes,json=headerBytes,proto3" json:"header_bytes,omitempty"`
	// Number of bytes of each message to log. If the size of the message is
	// greater than the defined limit, content pass the limit will be
	// truncated. The default value is 0.
	MessageBytes int32 `protobuf:"varint,3,opt,name=message_bytes,json=messageBytes,proto3" json:"message_bytes,omitempty"`
	// Attachs a sampler to this group of methods. The default sampler is
	// AlwaysSampler.
	Sampler *Sampler `protobuf:"bytes,4,opt,name=sampler,proto3" json:"sampler,omitempty"`
}

func (x *ObservabilityConfig_LoggingConfig_LogFilter) Reset() {
	*x = ObservabilityConfig_LoggingConfig_LogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_observability_internal_config_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityConfig_LoggingConfig_LogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityConfig_LoggingConfig_LogFilter) ProtoMessage() {}

func (x *ObservabilityConfig_LoggingConfig_LogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_observability_internal_config_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityConfig_LoggingConfig_LogFilter.ProtoReflect.Descriptor instead.
func (*ObservabilityConfig_LoggingConfig_LogFilter) Descriptor() ([]byte, []int) {
	return file_observability_internal_config_config_proto_rawDescGZIP(), []int{1, 3, 0}
}

func (x *ObservabilityConfig_LoggingConfig_LogFilter) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *ObservabilityConfig_LoggingConfig_LogFilter) GetHeaderBytes() int32 {
	if x != nil {
		return x.HeaderBytes
	}
	return 0
}

func (x *ObservabilityConfig_LoggingConfig_LogFilter) GetMessageBytes() int32 {
	if x != nil {
		return x.MessageBytes
	}
	return 0
}

func (x *ObservabilityConfig_LoggingConfig_LogFilter) GetSampler() *Sampler {
	if x != nil {
		return x.Sampler
	}
	return nil
}

var File_observability_internal_config_config_proto protoreflect.FileDescriptor

var file_observability_internal_config_config_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xef, 0x04, 0x0a, 0x07, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0d, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x67, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x52, 0x0a, 0x06, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x12,
	0x4f, 0x0a, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x76, 0x65, 0x72,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72,
	0x1a, 0x59, 0x0a, 0x13, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x68, 0x0a, 0x14, 0x50,
	0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x61, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x0f, 0x0a, 0x0d, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x1a, 0x0e, 0x0a, 0x0c, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x72, 0x22, 0xce, 0x0a, 0x0a, 0x13, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6e, 0x0a, 0x0f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x44, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x6b, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x74, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xd4, 0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x20, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x55, 0x0a,
	0x0d, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44,
	0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x72, 0x1a, 0x0f, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xb6, 0x02, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x6f,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xb3, 0x01, 0x0a, 0x09, 0x4c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x1a, 0x12,
	0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x70, 0x0a, 0x1c, 0x69, 0x6f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x18, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x34,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_observability_internal_config_config_proto_rawDescOnce sync.Once
	file_observability_internal_config_config_proto_rawDescData = file_observability_internal_config_config_proto_rawDesc
)

func file_observability_internal_config_config_proto_rawDescGZIP() []byte {
	file_observability_internal_config_config_proto_rawDescOnce.Do(func() {
		file_observability_internal_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_observability_internal_config_config_proto_rawDescData)
	})
	return file_observability_internal_config_config_proto_rawDescData
}

var file_observability_internal_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_observability_internal_config_config_proto_goTypes = []interface{}{
	(*Sampler)(nil),                                     // 0: grpc.observability.config.v1alpha.Sampler
	(*ObservabilityConfig)(nil),                         // 1: grpc.observability.config.v1alpha.ObservabilityConfig
	(*Sampler_RateLimitingSampler)(nil),                 // 2: grpc.observability.config.v1alpha.Sampler.RateLimitingSampler
	(*Sampler_ProbabilisticSampler)(nil),                // 3: grpc.observability.config.v1alpha.Sampler.ProbabilisticSampler
	(*Sampler_AlwaysSampler)(nil),                       // 4: grpc.observability.config.v1alpha.Sampler.AlwaysSampler
	(*Sampler_NeverSampler)(nil),                        // 5: grpc.observability.config.v1alpha.Sampler.NeverSampler
	(*ObservabilityConfig_ExporterConfig)(nil),          // 6: grpc.observability.config.v1alpha.ObservabilityConfig.ExporterConfig
	(*ObservabilityConfig_TracingConfig)(nil),           // 7: grpc.observability.config.v1alpha.ObservabilityConfig.TracingConfig
	(*ObservabilityConfig_MetricsConfig)(nil),           // 8: grpc.observability.config.v1alpha.ObservabilityConfig.MetricsConfig
	(*ObservabilityConfig_LoggingConfig)(nil),           // 9: grpc.observability.config.v1alpha.ObservabilityConfig.LoggingConfig
	(*ObservabilityConfig_DeploymentConfig)(nil),        // 10: grpc.observability.config.v1alpha.ObservabilityConfig.DeploymentConfig
	(*ObservabilityConfig_LoggingConfig_LogFilter)(nil), // 11: grpc.observability.config.v1alpha.ObservabilityConfig.LoggingConfig.LogFilter
	(*durationpb.Duration)(nil),                         // 12: google.protobuf.Duration
}
var file_observability_internal_config_config_proto_depIdxs = []int32{
	2,  // 0: grpc.observability.config.v1alpha.Sampler.rate_limiting:type_name -> grpc.observability.config.v1alpha.Sampler.RateLimitingSampler
	3,  // 1: grpc.observability.config.v1alpha.Sampler.probabilistic:type_name -> grpc.observability.config.v1alpha.Sampler.ProbabilisticSampler
	4,  // 2: grpc.observability.config.v1alpha.Sampler.always:type_name -> grpc.observability.config.v1alpha.Sampler.AlwaysSampler
	5,  // 3: grpc.observability.config.v1alpha.Sampler.never:type_name -> grpc.observability.config.v1alpha.Sampler.NeverSampler
	6,  // 4: grpc.observability.config.v1alpha.ObservabilityConfig.exporter_config:type_name -> grpc.observability.config.v1alpha.ObservabilityConfig.ExporterConfig
	7,  // 5: grpc.observability.config.v1alpha.ObservabilityConfig.tracing_config:type_name -> grpc.observability.config.v1alpha.ObservabilityConfig.TracingConfig
	8,  // 6: grpc.observability.config.v1alpha.ObservabilityConfig.metrics_config:type_name -> grpc.observability.config.v1alpha.ObservabilityConfig.MetricsConfig
	9,  // 7: grpc.observability.config.v1alpha.ObservabilityConfig.logging_config:type_name -> grpc.observability.config.v1alpha.ObservabilityConfig.LoggingConfig
	10, // 8: grpc.observability.config.v1alpha.ObservabilityConfig.deployment_config:type_name -> grpc.observability.config.v1alpha.ObservabilityConfig.DeploymentConfig
	12, // 9: grpc.observability.config.v1alpha.Sampler.RateLimitingSampler.sample_interval:type_name -> google.protobuf.Duration
	12, // 10: grpc.observability.config.v1alpha.ObservabilityConfig.ExporterConfig.reporting_interval:type_name -> google.protobuf.Duration
	0,  // 11: grpc.observability.config.v1alpha.ObservabilityConfig.TracingConfig.sampler:type_name -> grpc.observability.config.v1alpha.Sampler
	11, // 12: grpc.observability.config.v1alpha.ObservabilityConfig.LoggingConfig.log_filters:type_name -> grpc.observability.config.v1alpha.ObservabilityConfig.LoggingConfig.LogFilter
	0,  // 13: grpc.observability.config.v1alpha.ObservabilityConfig.LoggingConfig.LogFilter.sampler:type_name -> grpc.observability.config.v1alpha.Sampler
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_observability_internal_config_config_proto_init() }
func file_observability_internal_config_config_proto_init() {
	if File_observability_internal_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_observability_internal_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sampler_RateLimitingSampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sampler_ProbabilisticSampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sampler_AlwaysSampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sampler_NeverSampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityConfig_ExporterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityConfig_TracingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityConfig_MetricsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityConfig_LoggingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityConfig_DeploymentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_observability_internal_config_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityConfig_LoggingConfig_LogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_observability_internal_config_config_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Sampler_RateLimiting)(nil),
		(*Sampler_Probabilistic)(nil),
		(*Sampler_Always)(nil),
		(*Sampler_Never)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_observability_internal_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_observability_internal_config_config_proto_goTypes,
		DependencyIndexes: file_observability_internal_config_config_proto_depIdxs,
		MessageInfos:      file_observability_internal_config_config_proto_msgTypes,
	}.Build()
	File_observability_internal_config_config_proto = out.File
	file_observability_internal_config_config_proto_rawDesc = nil
	file_observability_internal_config_config_proto_goTypes = nil
	file_observability_internal_config_config_proto_depIdxs = nil
}
