// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: config/observability_config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExporterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For OC and OTEL, the observability plugin will try to register
	// Stackdriver exporter by default. If users want to supply their own
	// exporters, they can directly register via OC/OTEL API. Users can also
	// turn off the default Stackdriver exporters via the following fields.
	DisableDefaultTracingExporter bool `protobuf:"varint,1,opt,name=disable_default_tracing_exporter,json=disableDefaultTracingExporter,proto3" json:"disable_default_tracing_exporter,omitempty"`
	DisableDefaultMetricsExporter bool `protobuf:"varint,2,opt,name=disable_default_metrics_exporter,json=disableDefaultMetricsExporter,proto3" json:"disable_default_metrics_exporter,omitempty"`
	DisableDefaultLoggingExporter bool `protobuf:"varint,3,opt,name=disable_default_logging_exporter,json=disableDefaultLoggingExporter,proto3" json:"disable_default_logging_exporter,omitempty"`
	// By default, the project_id will be fetched from the deployment
	// environment. This can be done via the Google Default Credentials or
	// GCP_PROJECT environment variable.
	ProjectId string `protobuf:"bytes,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// The reporting interval for all observability data for default exporters.
	ReportingInterval *durationpb.Duration `protobuf:"bytes,5,opt,name=reporting_interval,json=reportingInterval,proto3" json:"reporting_interval,omitempty"`
}

func (x *ExporterConfig) Reset() {
	*x = ExporterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExporterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExporterConfig) ProtoMessage() {}

func (x *ExporterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExporterConfig.ProtoReflect.Descriptor instead.
func (*ExporterConfig) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{0}
}

func (x *ExporterConfig) GetDisableDefaultTracingExporter() bool {
	if x != nil {
		return x.DisableDefaultTracingExporter
	}
	return false
}

func (x *ExporterConfig) GetDisableDefaultMetricsExporter() bool {
	if x != nil {
		return x.DisableDefaultMetricsExporter
	}
	return false
}

func (x *ExporterConfig) GetDisableDefaultLoggingExporter() bool {
	if x != nil {
		return x.DisableDefaultLoggingExporter
	}
	return false
}

func (x *ExporterConfig) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ExporterConfig) GetReportingInterval() *durationpb.Duration {
	if x != nil {
		return x.ReportingInterval
	}
	return nil
}

type TracingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sampler:
	//	*TracingConfig_RateLimiting
	//	*TracingConfig_Probabilistic
	//	*TracingConfig_Always
	//	*TracingConfig_Never
	Sampler isTracingConfig_Sampler `protobuf_oneof:"sampler"`
}

func (x *TracingConfig) Reset() {
	*x = TracingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfig) ProtoMessage() {}

func (x *TracingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfig.ProtoReflect.Descriptor instead.
func (*TracingConfig) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{1}
}

func (m *TracingConfig) GetSampler() isTracingConfig_Sampler {
	if m != nil {
		return m.Sampler
	}
	return nil
}

func (x *TracingConfig) GetRateLimiting() *TracingConfig_RateLimitingSampler {
	if x, ok := x.GetSampler().(*TracingConfig_RateLimiting); ok {
		return x.RateLimiting
	}
	return nil
}

func (x *TracingConfig) GetProbabilistic() *TracingConfig_ProbabilisticSampler {
	if x, ok := x.GetSampler().(*TracingConfig_Probabilistic); ok {
		return x.Probabilistic
	}
	return nil
}

func (x *TracingConfig) GetAlways() *TracingConfig_AlwaysSampler {
	if x, ok := x.GetSampler().(*TracingConfig_Always); ok {
		return x.Always
	}
	return nil
}

func (x *TracingConfig) GetNever() *TracingConfig_NeverSampler {
	if x, ok := x.GetSampler().(*TracingConfig_Never); ok {
		return x.Never
	}
	return nil
}

type isTracingConfig_Sampler interface {
	isTracingConfig_Sampler()
}

type TracingConfig_RateLimiting struct {
	RateLimiting *TracingConfig_RateLimitingSampler `protobuf:"bytes,1,opt,name=rate_limiting,json=rateLimiting,proto3,oneof"`
}

type TracingConfig_Probabilistic struct {
	Probabilistic *TracingConfig_ProbabilisticSampler `protobuf:"bytes,2,opt,name=probabilistic,proto3,oneof"`
}

type TracingConfig_Always struct {
	Always *TracingConfig_AlwaysSampler `protobuf:"bytes,3,opt,name=always,proto3,oneof"`
}

type TracingConfig_Never struct {
	Never *TracingConfig_NeverSampler `protobuf:"bytes,4,opt,name=never,proto3,oneof"`
}

func (*TracingConfig_RateLimiting) isTracingConfig_Sampler() {}

func (*TracingConfig_Probabilistic) isTracingConfig_Sampler() {}

func (*TracingConfig_Always) isTracingConfig_Sampler() {}

func (*TracingConfig_Never) isTracingConfig_Sampler() {}

type MetricsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricsConfig) Reset() {
	*x = MetricsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsConfig) ProtoMessage() {}

func (x *MetricsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsConfig.ProtoReflect.Descriptor instead.
func (*MetricsConfig) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{2}
}

type LoggingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LoggingConfig) Reset() {
	*x = LoggingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingConfig) ProtoMessage() {}

func (x *LoggingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingConfig.ProtoReflect.Descriptor instead.
func (*LoggingConfig) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{3}
}

type DeploymentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asm *DeploymentConfig_AnthosServiceMeshConfig `protobuf:"bytes,1,opt,name=asm,proto3" json:"asm,omitempty"`
	Td  *DeploymentConfig_TrafficDirectorConfig   `protobuf:"bytes,2,opt,name=td,proto3" json:"td,omitempty"`
}

func (x *DeploymentConfig) Reset() {
	*x = DeploymentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentConfig) ProtoMessage() {}

func (x *DeploymentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentConfig.ProtoReflect.Descriptor instead.
func (*DeploymentConfig) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{4}
}

func (x *DeploymentConfig) GetAsm() *DeploymentConfig_AnthosServiceMeshConfig {
	if x != nil {
		return x.Asm
	}
	return nil
}

func (x *DeploymentConfig) GetTd() *DeploymentConfig_TrafficDirectorConfig {
	if x != nil {
		return x.Td
	}
	return nil
}

// Configuration for observability behaviors. By default, no configuration is
// required for tracing/metrics/logging to function. This config captures the
// most common knobs for gRPC users. It's always possible to override with
// explicit config in code.
type ObservabilityConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exporter *ExporterConfig `protobuf:"bytes,1,opt,name=exporter,proto3" json:"exporter,omitempty"`
	Tracing  *TracingConfig  `protobuf:"bytes,2,opt,name=tracing,proto3" json:"tracing,omitempty"`
	Metrics  *MetricsConfig  `protobuf:"bytes,3,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Logging  *LoggingConfig  `protobuf:"bytes,4,opt,name=logging,proto3" json:"logging,omitempty"`
	// We want this configuration to be portable across different environments.
	// Users should be able to config this file once and deploy it with any
	// control plane we offer.
	Deployment *DeploymentConfig `protobuf:"bytes,5,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *ObservabilityConfig) Reset() {
	*x = ObservabilityConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityConfig) ProtoMessage() {}

func (x *ObservabilityConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityConfig.ProtoReflect.Descriptor instead.
func (*ObservabilityConfig) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{5}
}

func (x *ObservabilityConfig) GetExporter() *ExporterConfig {
	if x != nil {
		return x.Exporter
	}
	return nil
}

func (x *ObservabilityConfig) GetTracing() *TracingConfig {
	if x != nil {
		return x.Tracing
	}
	return nil
}

func (x *ObservabilityConfig) GetMetrics() *MetricsConfig {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ObservabilityConfig) GetLogging() *LoggingConfig {
	if x != nil {
		return x.Logging
	}
	return nil
}

func (x *ObservabilityConfig) GetDeployment() *DeploymentConfig {
	if x != nil {
		return x.Deployment
	}
	return nil
}

// RateLimitingSampler is the default sampler. It enforces that only a
// certain calls can be traced in the given period.
type TracingConfig_RateLimitingSampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default trace interval is 10s or 0.1 trace/second.
	SampleInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=sample_interval,json=sampleInterval,proto3" json:"sample_interval,omitempty"`
}

func (x *TracingConfig_RateLimitingSampler) Reset() {
	*x = TracingConfig_RateLimitingSampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfig_RateLimitingSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfig_RateLimitingSampler) ProtoMessage() {}

func (x *TracingConfig_RateLimitingSampler) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfig_RateLimitingSampler.ProtoReflect.Descriptor instead.
func (*TracingConfig_RateLimitingSampler) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *TracingConfig_RateLimitingSampler) GetSampleInterval() *durationpb.Duration {
	if x != nil {
		return x.SampleInterval
	}
	return nil
}

// ProbabilisticSampler picks calls via straightforward probability.
type TracingConfig_ProbabilisticSampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The default tracing rate is 0.1.
	RateNominator   uint32 `protobuf:"varint,1,opt,name=rate_nominator,json=rateNominator,proto3" json:"rate_nominator,omitempty"`
	RateDenominator uint32 `protobuf:"varint,2,opt,name=rate_denominator,json=rateDenominator,proto3" json:"rate_denominator,omitempty"`
}

func (x *TracingConfig_ProbabilisticSampler) Reset() {
	*x = TracingConfig_ProbabilisticSampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfig_ProbabilisticSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfig_ProbabilisticSampler) ProtoMessage() {}

func (x *TracingConfig_ProbabilisticSampler) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfig_ProbabilisticSampler.ProtoReflect.Descriptor instead.
func (*TracingConfig_ProbabilisticSampler) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{1, 1}
}

func (x *TracingConfig_ProbabilisticSampler) GetRateNominator() uint32 {
	if x != nil {
		return x.RateNominator
	}
	return 0
}

func (x *TracingConfig_ProbabilisticSampler) GetRateDenominator() uint32 {
	if x != nil {
		return x.RateDenominator
	}
	return 0
}

// AlwaysSampler traces every call.
type TracingConfig_AlwaysSampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TracingConfig_AlwaysSampler) Reset() {
	*x = TracingConfig_AlwaysSampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfig_AlwaysSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfig_AlwaysSampler) ProtoMessage() {}

func (x *TracingConfig_AlwaysSampler) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfig_AlwaysSampler.ProtoReflect.Descriptor instead.
func (*TracingConfig_AlwaysSampler) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{1, 2}
}

// NeverSampler disables tracing.
type TracingConfig_NeverSampler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TracingConfig_NeverSampler) Reset() {
	*x = TracingConfig_NeverSampler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TracingConfig_NeverSampler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TracingConfig_NeverSampler) ProtoMessage() {}

func (x *TracingConfig_NeverSampler) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TracingConfig_NeverSampler.ProtoReflect.Descriptor instead.
func (*TracingConfig_NeverSampler) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{1, 3}
}

// AnthosServiceMeshConfig controls the observability behavior when the
// application is deployed to ASM.
type DeploymentConfig_AnthosServiceMeshConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableVerboseMetadataExchange bool `protobuf:"varint,1,opt,name=enable_verbose_metadata_exchange,json=enableVerboseMetadataExchange,proto3" json:"enable_verbose_metadata_exchange,omitempty"`
}

func (x *DeploymentConfig_AnthosServiceMeshConfig) Reset() {
	*x = DeploymentConfig_AnthosServiceMeshConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentConfig_AnthosServiceMeshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentConfig_AnthosServiceMeshConfig) ProtoMessage() {}

func (x *DeploymentConfig_AnthosServiceMeshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentConfig_AnthosServiceMeshConfig.ProtoReflect.Descriptor instead.
func (*DeploymentConfig_AnthosServiceMeshConfig) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DeploymentConfig_AnthosServiceMeshConfig) GetEnableVerboseMetadataExchange() bool {
	if x != nil {
		return x.EnableVerboseMetadataExchange
	}
	return false
}

// TrafficDirectorConfig controls the observability behavior when the
// application is deployed to the Traffic Director.
type DeploymentConfig_TrafficDirectorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisableServiceGraph bool `protobuf:"varint,1,opt,name=disable_service_graph,json=disableServiceGraph,proto3" json:"disable_service_graph,omitempty"`
}

func (x *DeploymentConfig_TrafficDirectorConfig) Reset() {
	*x = DeploymentConfig_TrafficDirectorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_observability_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentConfig_TrafficDirectorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentConfig_TrafficDirectorConfig) ProtoMessage() {}

func (x *DeploymentConfig_TrafficDirectorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_observability_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentConfig_TrafficDirectorConfig.ProtoReflect.Descriptor instead.
func (*DeploymentConfig_TrafficDirectorConfig) Descriptor() ([]byte, []int) {
	return file_config_observability_config_proto_rawDescGZIP(), []int{4, 1}
}

func (x *DeploymentConfig_TrafficDirectorConfig) GetDisableServiceGraph() bool {
	if x != nil {
		return x.DisableServiceGraph
	}
	return false
}

var File_config_observability_config_proto protoreflect.FileDescriptor

var file_config_observability_config_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4,
	0x02, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x20, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x12, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xed, 0x04, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x63, 0x0a, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x06, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4e,
	0x65, 0x76, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6e,
	0x65, 0x76, 0x65, 0x72, 0x1a, 0x59, 0x0a, 0x13, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a,
	0x68, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x10, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x0f, 0x0a, 0x0d, 0x41, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x1a, 0x0e, 0x0a, 0x0c, 0x4e, 0x65,
	0x76, 0x65, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x22, 0x0f, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x0f, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xed, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x03,
	0x61, 0x73, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x6e, 0x74, 0x68, 0x6f, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03,
	0x61, 0x73, 0x6d, 0x12, 0x51, 0x0a, 0x02, 0x74, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x02, 0x74, 0x64, 0x1a, 0x62, 0x0a, 0x17, 0x41, 0x6e, 0x74, 0x68, 0x6f, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x47, 0x0a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x4b, 0x0a, 0x15, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x22, 0xf5, 0x02, 0x0a, 0x13, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x45, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x42,
	0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x2d, 0x5a, 0x2b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_config_observability_config_proto_rawDescOnce sync.Once
	file_config_observability_config_proto_rawDescData = file_config_observability_config_proto_rawDesc
)

func file_config_observability_config_proto_rawDescGZIP() []byte {
	file_config_observability_config_proto_rawDescOnce.Do(func() {
		file_config_observability_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_observability_config_proto_rawDescData)
	})
	return file_config_observability_config_proto_rawDescData
}

var file_config_observability_config_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_config_observability_config_proto_goTypes = []interface{}{
	(*ExporterConfig)(nil),                           // 0: grpc.observability_config.ExporterConfig
	(*TracingConfig)(nil),                            // 1: grpc.observability_config.TracingConfig
	(*MetricsConfig)(nil),                            // 2: grpc.observability_config.MetricsConfig
	(*LoggingConfig)(nil),                            // 3: grpc.observability_config.LoggingConfig
	(*DeploymentConfig)(nil),                         // 4: grpc.observability_config.DeploymentConfig
	(*ObservabilityConfig)(nil),                      // 5: grpc.observability_config.ObservabilityConfig
	(*TracingConfig_RateLimitingSampler)(nil),        // 6: grpc.observability_config.TracingConfig.RateLimitingSampler
	(*TracingConfig_ProbabilisticSampler)(nil),       // 7: grpc.observability_config.TracingConfig.ProbabilisticSampler
	(*TracingConfig_AlwaysSampler)(nil),              // 8: grpc.observability_config.TracingConfig.AlwaysSampler
	(*TracingConfig_NeverSampler)(nil),               // 9: grpc.observability_config.TracingConfig.NeverSampler
	(*DeploymentConfig_AnthosServiceMeshConfig)(nil), // 10: grpc.observability_config.DeploymentConfig.AnthosServiceMeshConfig
	(*DeploymentConfig_TrafficDirectorConfig)(nil),   // 11: grpc.observability_config.DeploymentConfig.TrafficDirectorConfig
	(*durationpb.Duration)(nil),                      // 12: google.protobuf.Duration
}
var file_config_observability_config_proto_depIdxs = []int32{
	12, // 0: grpc.observability_config.ExporterConfig.reporting_interval:type_name -> google.protobuf.Duration
	6,  // 1: grpc.observability_config.TracingConfig.rate_limiting:type_name -> grpc.observability_config.TracingConfig.RateLimitingSampler
	7,  // 2: grpc.observability_config.TracingConfig.probabilistic:type_name -> grpc.observability_config.TracingConfig.ProbabilisticSampler
	8,  // 3: grpc.observability_config.TracingConfig.always:type_name -> grpc.observability_config.TracingConfig.AlwaysSampler
	9,  // 4: grpc.observability_config.TracingConfig.never:type_name -> grpc.observability_config.TracingConfig.NeverSampler
	10, // 5: grpc.observability_config.DeploymentConfig.asm:type_name -> grpc.observability_config.DeploymentConfig.AnthosServiceMeshConfig
	11, // 6: grpc.observability_config.DeploymentConfig.td:type_name -> grpc.observability_config.DeploymentConfig.TrafficDirectorConfig
	0,  // 7: grpc.observability_config.ObservabilityConfig.exporter:type_name -> grpc.observability_config.ExporterConfig
	1,  // 8: grpc.observability_config.ObservabilityConfig.tracing:type_name -> grpc.observability_config.TracingConfig
	2,  // 9: grpc.observability_config.ObservabilityConfig.metrics:type_name -> grpc.observability_config.MetricsConfig
	3,  // 10: grpc.observability_config.ObservabilityConfig.logging:type_name -> grpc.observability_config.LoggingConfig
	4,  // 11: grpc.observability_config.ObservabilityConfig.deployment:type_name -> grpc.observability_config.DeploymentConfig
	12, // 12: grpc.observability_config.TracingConfig.RateLimitingSampler.sample_interval:type_name -> google.protobuf.Duration
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_config_observability_config_proto_init() }
func file_config_observability_config_proto_init() {
	if File_config_observability_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_observability_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExporterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfig_RateLimitingSampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfig_ProbabilisticSampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfig_AlwaysSampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TracingConfig_NeverSampler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentConfig_AnthosServiceMeshConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_observability_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentConfig_TrafficDirectorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_config_observability_config_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TracingConfig_RateLimiting)(nil),
		(*TracingConfig_Probabilistic)(nil),
		(*TracingConfig_Always)(nil),
		(*TracingConfig_Never)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_observability_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_observability_config_proto_goTypes,
		DependencyIndexes: file_config_observability_config_proto_depIdxs,
		MessageInfos:      file_config_observability_config_proto_msgTypes,
	}.Build()
	File_config_observability_config_proto = out.File
	file_config_observability_config_proto_rawDesc = nil
	file_config_observability_config_proto_goTypes = nil
	file_config_observability_config_proto_depIdxs = nil
}
