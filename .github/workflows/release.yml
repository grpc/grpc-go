name: Release

on:
  push:
    tags:
      - cmd/protoc-gen-go-grpc/v[0-9]+.[0-9]+.[0-9]+

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }} 
    
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true
          prerelease: false

  build_release:
    name: Build Release assets
    runs-on: ubuntu-latest
    needs: create_release
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [386, amd64]
        exclude:
          - goos: darwin
            goarch: 386

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: Download dependencies
        run: |
          cd cmd/protoc-gen-go-grpc
          go mod download

      - name: Prepare build directory
        run: |
          mkdir -p build/
          cp README.md build/
          cp LICENSE build/

      - name: Build protoc-gen-go-grpc
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          cd cmd/protoc-gen-go-grpc
          go build -trimpath -o $GITHUB_WORKSPACE/build

      - name: Create package
        id: package
        run: |
          PACKAGE_NAME=protoc-gen-go-grpc.${GITHUB_REF#refs/tags/cmd/protoc-gen-go-grpc/}.${{ matrix.goos }}.${{ matrix.goarch }}.tar.gz
          tar -czvf PACKAGE_NAME -C build .
          echo ::set-output name=name::${PACKAGE_NAME}

      - name: Upload asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/${{ steps.package.outputs.name }}
          asset_name: ${{ steps.package.outputs.name }}
          asset_content_type: application/gzip
